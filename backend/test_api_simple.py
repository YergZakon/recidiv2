#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–°–æ–∑–¥–∞–µ—Ç mock FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏
"""

import sys
import os
from typing import Dict, Any, Optional
from datetime import datetime
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
from app.core.constants import (
    TOTAL_VIOLATIONS_ANALYZED,
    TOTAL_RECIDIVISTS,
    PREVENTABLE_CRIMES_PERCENT,
    RISK_WEIGHTS,
    PATTERN_RISKS,
    CRIME_TIME_WINDOWS
)

# –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é RiskService –±–µ–∑ SQLAlchemy
class MockRiskService:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è RiskService –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        from scripts.test_standalone_risk import StandaloneRiskCalculator, StandaloneCrimeForecaster
        self.calculator = StandaloneRiskCalculator()
        self.forecaster = StandaloneCrimeForecaster()
    
    def validate_person_data(self, person_data: Dict) -> tuple:
        """–ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è"""
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'pattern_type' not in person_data:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç pattern_type")
        elif person_data['pattern_type'] not in PATTERN_RISKS:
            errors.append("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π pattern_type")
            
        if 'current_age' not in person_data:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç current_age")
        elif not (14 <= person_data['current_age'] <= 100):
            errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
            
        if 'total_cases' not in person_data:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç total_cases")
        elif person_data['total_cases'] < 0:
            errors.append("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª")
        
        return len(errors) == 0, errors
    
    def calculate_risk_for_person_dict(self, person_data: Dict) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞"""
        risk_score, components = self.calculator.calculate_risk_score(person_data)
        risk_level, recommendation = self.calculator.get_risk_level(risk_score)
        
        return {
            'risk_score': risk_score,
            'risk_components': components,
            'risk_level': risk_level,
            'recommendation': recommendation,
            'person_data': person_data,
            'calculated_at': datetime.utcnow().isoformat()
        }
    
    def get_risk_statistics(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        return {
            'total_analyzed': TOTAL_VIOLATIONS_ANALYZED,
            'total_recidivists': TOTAL_RECIDIVISTS,
            'preventable_percent': PREVENTABLE_CRIMES_PERCENT,
            'pattern_distribution': {
                "mixed_unstable": 72.7,
                "chronic_criminal": 13.6,
                "escalating": 7.0,
                "deescalating": 5.7,
                "single": 1.0
            }
        }


def mock_calculate_risk_endpoint(request_data: Dict) -> Dict:
    """Mock endpoint –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞"""
    service = MockRiskService()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, errors = service.validate_person_data(request_data)
    if not is_valid:
        return {
            'status_code': 422,
            'detail': {'message': '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', 'errors': errors}
        }
    
    try:
        result = service.calculate_risk_for_person_dict(request_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ API
        api_response = {
            'risk_score': result['risk_score'],
            'risk_level': result['risk_level'],
            'risk_category': result['risk_level'].split(' ', 1)[1] if ' ' in result['risk_level'] else result['risk_level'],
            'recommendation': result['recommendation'],
            'components': result['risk_components'],
            'person_data': result['person_data'],
            'calculated_at': result['calculated_at']
        }
        
        return {'status_code': 200, 'data': api_response}
        
    except Exception as e:
        return {
            'status_code': 500,
            'detail': f'–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}'
        }


def mock_quick_assessment_endpoint(request_data: Dict) -> Dict:
    """Mock endpoint –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏"""
    service = MockRiskService()
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º standalone –≤–µ—Ä—Å–∏—é
        from scripts.test_standalone_risk import standalone_quick_assessment
        result = standalone_quick_assessment(request_data)
        
        api_response = {
            'risk_score': result['risk_score'],
            'risk_level': result['risk_level'],
            'recommendation': result['recommendation'],
            'components': result['components'],
            'most_likely_crime': result.get('most_likely_crime'),
            'calculated_at': datetime.utcnow().isoformat()
        }
        
        return {'status_code': 200, 'data': api_response}
        
    except Exception as e:
        return {
            'status_code': 500,
            'detail': f'–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏: {str(e)}'
        }


def mock_forecast_timeline_endpoint(request_data: Dict) -> Dict:
    """Mock endpoint –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    service = MockRiskService()
    
    try:
        forecasts_raw = service.forecaster.forecast_crime_timeline(request_data)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç API
        forecasts = []
        for crime_type, forecast in forecasts_raw.items():
            forecasts.append({
                'crime_type': forecast['crime_type'],
                'days': forecast['days'],
                'date': forecast['date'].isoformat(),
                'probability': forecast['probability'],
                'confidence': forecast['confidence'],
                'risk_level': forecast['risk_level'],
                'ci_lower': forecast['ci_lower'],
                'ci_upper': forecast['ci_upper']
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        forecasts.sort(key=lambda x: x['days'])
        
        api_response = {
            'forecasts': forecasts,
            'person_iin': request_data.get('iin'),
            'total_forecasts': len(forecasts),
            'calculated_at': datetime.utcnow().isoformat()
        }
        
        return {'status_code': 200, 'data': api_response}
        
    except Exception as e:
        return {
            'status_code': 500,
            'detail': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}'
        }


def mock_statistics_endpoint() -> Dict:
    """Mock endpoint –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    service = MockRiskService()
    
    try:
        stats = service.get_risk_statistics()
        
        api_response = {
            'total_analyzed': stats['total_analyzed'],
            'total_recidivists': stats['total_recidivists'], 
            'preventable_crimes_percent': stats['preventable_percent'],
            'risk_distribution': {
                "critical": 1856,  # 15%
                "high": 3083,      # 25%
                "medium": 4316,    # 35%
                "low": 3078        # 25%
            },
            'pattern_distribution': stats['pattern_distribution']
        }
        
        return {'status_code': 200, 'data': api_response}
        
    except Exception as e:
        return {
            'status_code': 500,
            'detail': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}'
        }


def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ mock API endpoints"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS (MOCK)")
    print("=" * 80)
    
    tests_passed = 0
    tests_failed = 0
    
    # –¢–µ—Å—Ç 1: –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞
    print("\nüß™ –¢–µ—Å—Ç 1: –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞")
    try:
        test_data = {
            "iin": "123456789012",
            "pattern_type": "mixed_unstable",
            "total_cases": 5,
            "criminal_count": 2,
            "admin_count": 3,
            "days_since_last": 60,
            "current_age": 28,
            "age_at_first_violation": 21,
            "has_property": 0,
            "has_job": 1,
            "has_family": 0,
            "substance_abuse": 0,
            "has_escalation": 0,
            "admin_to_criminal": 1,
            "recidivism_rate": 1.5
        }
        
        response = mock_calculate_risk_endpoint(test_data)
        
        if response['status_code'] == 200:
            data = response['data']
            risk_score = data['risk_score']
            
            assert 0 <= risk_score <= 10, f"–†–∏—Å–∫-–±–∞–ª–ª –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {risk_score}"
            assert 'components' in data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"
            assert len(data['components']) == 6, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            expected_risk = 5.760
            assert abs(risk_score - expected_risk) < 0.01, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–∏—Å–∫-–±–∞–ª–ª: {risk_score}"
            
            print(f"   ‚úÖ –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞: {risk_score:.3f} ({data['risk_level']})")
            tests_passed += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {response}")
            tests_failed += 1
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        tests_failed += 1
    
    # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è
    print("\nüß™ –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    try:
        invalid_data = {
            "pattern_type": "invalid_pattern",
            "total_cases": -1,
            "current_age": 200
        }
        
        response = mock_calculate_risk_endpoint(invalid_data)
        
        if response['status_code'] == 422:
            print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            tests_passed += 1
        else:
            print(f"   ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {response}")
            tests_failed += 1
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        tests_failed += 1
    
    # –¢–µ—Å—Ç 3: –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\nüß™ –¢–µ—Å—Ç 3: –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞")
    try:
        test_data = {
            "pattern_type": "escalating",
            "total_cases": 8,
            "criminal_count": 3,
            "current_age": 23,
            "days_since_last": 30
        }
        
        response = mock_quick_assessment_endpoint(test_data)
        
        if response['status_code'] == 200:
            data = response['data']
            
            assert 'risk_score' in data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç risk_score"
            assert 'components' in data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç components"
            assert 0 <= data['risk_score'] <= 10, f"–†–∏—Å–∫-–±–∞–ª–ª –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {data['risk_score']}"
            
            print(f"   ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞: {data['risk_score']:.3f} ({data['risk_level']})")
            tests_passed += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏: {response}")
            tests_failed += 1
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏: {e}")
        tests_failed += 1
    
    # –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüß™ –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    try:
        response = mock_statistics_endpoint()
        
        if response['status_code'] == 200:
            data = response['data']
            
            assert data['total_analyzed'] == 146570, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"
            assert data['total_recidivists'] == 12333, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–∏–¥–∏–≤–∏—Å—Ç–æ–≤"
            assert 'risk_distribution' in data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤"
            
            print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {data['total_analyzed']:,} –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            tests_passed += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response}")
            tests_failed += 1
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        tests_failed += 1
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüß™ –¢–µ—Å—Ç 5: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
    try:
        test_data = {
            "pattern_type": "mixed_unstable",
            "total_cases": 3,
            "current_age": 25,
            "has_property": 0,
            "has_job": 1,
            "substance_abuse": 0
        }
        
        response = mock_forecast_timeline_endpoint(test_data)
        
        if response['status_code'] == 200:
            data = response['data']
            forecasts = data['forecasts']
            
            assert len(forecasts) > 0, "–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"
            assert len(forecasts) == len(CRIME_TIME_WINDOWS), "–ù–µ–ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            first_forecast = forecasts[0]
            assert 'crime_type' in first_forecast, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç crime_type"
            assert 'days' in first_forecast, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç days"
            assert 'probability' in first_forecast, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç probability"
            assert 30 <= first_forecast['days'] <= 365, "–î–Ω–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"
            assert 5 <= first_forecast['probability'] <= 95, "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"
            
            print(f"   ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: {len(forecasts)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
            print(f"        –ë–ª–∏–∂–∞–π—à–∏–π: {first_forecast['crime_type']} —á–µ—Ä–µ–∑ {first_forecast['days']} –¥–Ω–µ–π")
            tests_passed += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {response}")
            tests_failed += 1
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        tests_failed += 1
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 80)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API ENDPOINTS")
    print("=" * 80)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_failed}")
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {tests_passed + tests_failed}")
    
    if tests_failed == 0:
        print("\nüéâ –í–°–ï API ENDPOINTS –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("   –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—É")
        print("   API –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É —Å FastAPI")
        return 0
    else:
        print(f"\nüí• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í {tests_failed} ENDPOINTS!")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        return 1


def compare_with_original():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã API —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏"""
    print("\nüîç –°–†–ê–í–ù–ï–ù–ò–ï API –° –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ú–ò –†–ê–°–ß–ï–¢–ê–ú–ò")
    print("=" * 80)
    
    # –¢–æ—Ç –∂–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    test_case = {
        "pattern_type": "mixed_unstable",
        "total_cases": 5,
        "criminal_count": 2,
        "admin_count": 3,
        "days_since_last": 60,
        "current_age": 28,
        "age_at_first_violation": 21,
        "has_property": 0,
        "has_job": 1,
        "has_family": 0,
        "substance_abuse": 0,
        "has_escalation": 0,
        "admin_to_criminal": 1,
        "recidivism_rate": 1.5
    }
    
    response = mock_calculate_risk_endpoint(test_case)
    
    if response['status_code'] != 200:
        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {response}")
        return False
    
    api_risk_score = response['data']['risk_score']
    expected_risk_score = 5.760  # –ò–∑ –Ω–∞—à–∏—Ö —Ç–µ—Å—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    
    difference = abs(api_risk_score - expected_risk_score)
    
    print(f"API —Ä–∏—Å–∫-–±–∞–ª–ª:       {api_risk_score:.3f}")
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–∂–∏–¥–∞–µ–º—ã–π: {expected_risk_score:.3f}")
    print(f"–†–∞–∑–ª–∏—á–∏–µ:            {difference:.6f}")
    
    if difference < 0.001:
        print("üéâ –ü–û–õ–ù–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï!")
        print("   API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        return True
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏–µ, –Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ")
        return True


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    exit_code = test_api_endpoints()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
    if exit_code == 0:
        if compare_with_original():
            print("\nüöÄ API ENDPOINTS –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–´!")
            print("   –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º")
            print("   –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å FastAPI —Å–µ—Ä–≤–µ—Ä")
        else:
            exit_code = 1
    
    exit(exit_code)