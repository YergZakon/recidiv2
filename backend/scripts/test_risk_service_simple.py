#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç RiskService –±–µ–∑ pytest –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys
import os
from typing import Dict, List, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

def test_risk_calculator_initialization():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RiskCalculator...")
    
    try:
        from app.core.constants import RISK_WEIGHTS, PATTERN_RISKS
        from app.services.risk_service import RiskCalculator
        
        calc = RiskCalculator()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        assert calc.weights == RISK_WEIGHTS, "–í–µ—Å–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º"
        assert calc.pattern_risks == PATTERN_RISKS, "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –≤–µ—Å–æ–≤
        weights_sum = sum(calc.weights.values())
        assert abs(weights_sum - 1.0) < 0.001, f"–°—É–º–º–∞ –≤–µ—Å–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1.0, –ø–æ–ª—É—á–µ–Ω–æ {weights_sum}"
        
        print("   ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def test_basic_risk_calculation():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞"""
    print("üß™ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞...")
    
    try:
        from app.services.risk_service import RiskCalculator
        
        calc = RiskCalculator()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π
        person_data = {
            'pattern_type': 'mixed_unstable',
            'total_cases': 3,
            'criminal_count': 1,
            'admin_count': 2,
            'days_since_last': 60,
            'current_age': 28,
            'age_at_first_violation': 22,
            'has_property': 0,
            'has_job': 1,
            'has_family': 0,
            'substance_abuse': 0,
            'has_escalation': 1,
            'admin_to_criminal': 1,
            'recidivism_rate': 1
        }
        
        risk_score, components = calc.calculate_risk_score(person_data)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        assert 0 <= risk_score <= 10, f"–†–∏—Å–∫-–±–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10, –ø–æ–ª—É—á–µ–Ω {risk_score}"
        assert isinstance(components, dict), "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        expected_components = ['pattern', 'history', 'time', 'age', 'social', 'escalation']
        for comp in expected_components:
            assert comp in components, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç '{comp}'"
        
        print(f"   ‚úÖ –†–∏—Å–∫-–±–∞–ª–ª: {risk_score:.3f}, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {len(components)}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return False


def test_risk_level_determination():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    print("üß™ –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞...")
    
    try:
        from app.services.risk_service import RiskCalculator
        
        calc = RiskCalculator()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
        level_tests = [
            (8.5, "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", "–¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"),
            (6.0, "üü° –í—ã—Å–æ–∫–∏–π", "–£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"),
            (4.0, "üü† –°—Ä–µ–¥–Ω–∏–π", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å"),
            (1.5, "üü¢ –ù–∏–∑–∫–∏–π", "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å"),
        ]
        
        for score, expected_level, expected_rec in level_tests:
            actual_level, actual_rec = calc.get_risk_level(score)
            
            assert actual_level == expected_level, \
                f"–£—Ä–æ–≤–µ–Ω—å –¥–ª—è {score}: –æ–∂–∏–¥–∞–µ—Ç—Å—è '{expected_level}', –ø–æ–ª—É—á–µ–Ω–æ '{actual_level}'"
            assert actual_rec == expected_rec, \
                f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è {score}: –æ–∂–∏–¥–∞–µ—Ç—Å—è '{expected_rec}', –ø–æ–ª—É—á–µ–Ω–æ '{actual_rec}'"
        
        print(f"   ‚úÖ –í—Å–µ {len(level_tests)} —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π: {e}")
        return False


def test_crime_forecaster():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç CrimeForecaster...")
    
    try:
        from app.services.risk_service import CrimeForecaster
        from app.core.constants import CRIME_TIME_WINDOWS
        
        forecaster = CrimeForecaster()
        
        assert forecaster.base_windows == CRIME_TIME_WINDOWS, "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º"
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        person_data = {
            'pattern_type': 'mixed_unstable',
            'total_cases': 5,
            'current_age': 25,
            'has_property': 0,
            'has_job': 1,
            'substance_abuse': 0
        }
        
        forecasts = forecaster.forecast_crime_timeline(person_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–∏–ø—ã –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        expected_crimes = set(CRIME_TIME_WINDOWS.keys())
        actual_crimes = set(forecasts.keys())
        
        assert expected_crimes == actual_crimes, \
            f"–ù–µ–ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤. –û–∂–∏–¥–∞–µ—Ç—Å—è {expected_crimes}, –ø–æ–ª—É—á–µ–Ω–æ {actual_crimes}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        for crime_type, forecast in forecasts.items():
            assert isinstance(forecast, dict), f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è '{crime_type}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
            
            required_keys = ['crime_type', 'days', 'probability', 'confidence']
            for key in required_keys:
                assert key in forecast, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ –¥–ª—è '{crime_type}'"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π
            assert 30 <= forecast['days'] <= 365, \
                f"–î–Ω–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast['days']} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [30, 365] –¥–ª—è '{crime_type}'"
            
            assert 5 <= forecast['probability'] <= 95, \
                f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {forecast['probability']} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [5, 95] –¥–ª—è '{crime_type}'"
        
        print(f"   ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è {len(forecasts)} —Ç–∏–ø–æ–≤ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_risk_service():
    """–¢–µ—Å—Ç –æ–±–µ—Ä—Ç–∫–∏ RiskService"""
    print("üß™ –¢–µ—Å—Ç RiskService...")
    
    try:
        from app.services.risk_service import RiskService
        
        service = RiskService()
        
        person_data = {
            'pattern_type': 'mixed_unstable',
            'total_cases': 5,
            'criminal_count': 2,
            'current_age': 25,
            'days_since_last': 45
        }
        
        result = service.calculate_risk_for_person_dict(person_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        required_keys = [
            'person_data', 'risk_score', 'risk_components', 
            'risk_level', 'recommendation', 'forecasts', 
            'quick_assessment', 'calculated_at'
        ]
        
        for key in required_keys:
            assert key in result, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        assert isinstance(result['risk_score'], float), "risk_score –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å float"
        assert isinstance(result['risk_components'], dict), "risk_components –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict"
        assert isinstance(result['forecasts'], dict), "forecasts –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict"
        assert 0 <= result['risk_score'] <= 10, "risk_score –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [0, 10]"
        
        print(f"   ‚úÖ RiskService —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ä–∏—Å–∫-–±–∞–ª–ª: {result['risk_score']:.3f}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ RiskService: {e}")
        return False


def test_quick_assessment():
    """–¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏"""
    print("üß™ –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏...")
    
    try:
        from app.services.risk_service import quick_risk_assessment, RiskCalculator
        
        person_data = {
            'pattern_type': 'escalating',
            'total_cases': 8,
            'criminal_count': 3,
            'current_age': 23,
            'days_since_last': 30
        }
        
        quick_result = quick_risk_assessment(person_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        required_keys = ['risk_score', 'risk_level', 'recommendation', 'components', 'most_likely_crime']
        for key in required_keys:
            assert key in quick_result, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–Ω–æ–º—É —Ä–∞—Å—á–µ—Ç—É
        calc = RiskCalculator()
        full_risk_score, full_components = calc.calculate_risk_score(person_data)
        full_level, full_rec = calc.get_risk_level(full_risk_score)
        
        assert abs(quick_result['risk_score'] - full_risk_score) < 0.001, \
            f"–†–∞–∑–ª–∏—á–∏–µ –≤ —Ä–∏—Å–∫-–±–∞–ª–ª–∞—Ö –±—ã—Å—Ç—Ä–æ–π ({quick_result['risk_score']}) –∏ –ø–æ–ª–Ω–æ–π ({full_risk_score}) –æ—Ü–µ–Ω–∫–∏"
        
        assert quick_result['risk_level'] == full_level, \
            f"–†–∞–∑–ª–∏—á–∏–µ –≤ —É—Ä–æ–≤–Ω—è—Ö —Ä–∏—Å–∫–∞ –±—ã—Å—Ç—Ä–æ–π ('{quick_result['risk_level']}') –∏ –ø–æ–ª–Ω–æ–π ('{full_level}') –æ—Ü–µ–Ω–∫–∏"
        
        print(f"   ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, —Ä–∏—Å–∫: {quick_result['risk_score']:.3f}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏: {e}")
        return False


def test_data_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app.services.risk_service import RiskService
        
        service = RiskService()
        
        # –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        valid_data = {
            'pattern_type': 'mixed_unstable',
            'total_cases': 3,
            'current_age': 25
        }
        
        is_valid, errors = service.validate_person_data(valid_data)
        assert is_valid, f"–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {errors}"
        assert len(errors) == 0, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {errors}"
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        invalid_data = {
            'pattern_type': 'unknown_pattern',
            'total_cases': -1,
            'current_age': 150
        }
        
        is_valid, errors = service.validate_person_data(invalid_data)
        assert not is_valid, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é"
        assert len(errors) > 0, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        
        print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RISK SERVICE")
    print("=" * 80)
    
    tests = [
        test_risk_calculator_initialization,
        test_basic_risk_calculation,
        test_risk_level_determination,
        test_crime_forecaster,
        test_risk_service,
        test_quick_assessment,
        test_data_validation
    ]
    
    passed = 0
    failed = 0
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"   üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
            failed += 1
        
        print()
    
    print("=" * 80)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {failed}")
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(tests)}")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("   RiskService –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return 0
    else:
        print(f"\nüí• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)