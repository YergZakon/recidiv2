#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.core.database import SessionLocal
from app.models.real_data import PersonReal
from sqlalchemy import text, inspect
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def quick_cleanup():
    """–ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        real_count = db.query(PersonReal).count()
        if real_count == 0:
            print("‚ùå –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            print("–°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ: python scripts/initial_import.py")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {real_count:,} —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        inspector = inspect(db.get_bind())
        all_tables = inspector.get_table_names()
        
        # –†–µ–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–ù–ï –¢–†–û–ì–ê–ï–ú)
        real_tables = {
            'persons_real', 'violations_real', 'crime_transitions',
            'crime_time_windows', 'risk_assessment_history', 'alembic_version'
        }
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ
        test_tables = [t for t in all_tables if t not in real_tables and not t.startswith('pg_')]
        
        if not test_tables:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return True
        
        print(f"üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(test_tables)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü:")
        for table in test_tables:
            print(f"  - {table}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        response = input(f"\n–£–¥–∞–ª–∏—Ç—å {len(test_tables)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü? (y/N): ")
        if response.lower() not in ['y', 'yes', '–¥–∞']:
            print("–û—Ç–º–µ–Ω–µ–Ω–æ")
            return False
        
        # –£–¥–∞–ª—è–µ–º
        dropped = 0
        for table in test_tables:
            try:
                db.execute(text(f"DROP TABLE IF EXISTS {table} CASCADE"))
                dropped += 1
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞: {table}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {table}: {e}")
        
        db.commit()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        final_count = db.query(PersonReal).count()
        if final_count == real_count:
            print(f"\n‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            print(f"–£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü: {dropped}")
            print(f"–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {final_count:,} —á–µ–ª–æ–≤–µ–∫")
            return True
        else:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–∏–ª–æ—Å—å!")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
        return False
    finally:
        db.close()

if __name__ == "__main__":
    print("üßπ –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 40)
    
    success = quick_cleanup()
    
    if success:
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: GET /api/persons/real/statistics")
    else:
        print("\n–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("python scripts/cleanup_test_data.py")
    
    sys.exit(0 if success else 1)