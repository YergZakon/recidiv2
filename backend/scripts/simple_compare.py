#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤ –º–µ–∂–¥—É utils/ –∏ backend/ –≤–µ—Ä—Å–∏—è–º–∏
–ë–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç SQLAlchemy
"""

import sys
import os
from typing import Dict, List, Tuple
import time
import traceback

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'utils'))

def setup_imports():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    global OriginalCalculator, OriginalForecaster
    global BackendCalculator, BackendForecaster
    
    print("üîç –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é backend –º–æ–¥—É–ª—è –±–µ–∑ SQLAlchemy
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ RiskCalculator –∏ CrimeForecaster –ª–æ–≥–∏–∫—É
        from app.core.constants import RISK_WEIGHTS, PATTERN_RISKS, CRIME_TIME_WINDOWS
        
        # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        class SimplifiedRiskCalculator:
            def __init__(self):
                self.weights = RISK_WEIGHTS
                self.pattern_risks = PATTERN_RISKS
            
            def calculate_risk_score(self, person_data: Dict) -> Tuple[float, Dict]:
                """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ backend/app/services/risk_service.py"""
                components = {}
                
                # 1. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                pattern = person_data.get('pattern_type', 'unknown')
                pattern_score = self.pattern_risks.get(pattern, 0.5) * 10
                components['pattern'] = pattern_score * self.weights['pattern_weight']
                
                # 2. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π
                history_score = self._calculate_history_score(person_data)
                components['history'] = history_score * self.weights['history_weight']
                
                # 3. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                time_score = self._calculate_time_score(person_data)
                components['time'] = time_score * self.weights['time_weight']
                
                # 4. –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                age_score = self._calculate_age_score(person_data)
                components['age'] = age_score * self.weights['age_weight']
                
                # 5. –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                social_score = self._calculate_social_score(person_data)
                components['social'] = social_score * self.weights['social_weight']
                
                # 6. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ç—Å–∫–∞–ª–∞—Ü–∏–∏
                escalation_score = self._calculate_escalation_score(person_data)
                components['escalation'] = escalation_score * self.weights['escalation_weight']
                
                # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫-–±–∞–ª–ª
                risk_score = sum(components.values())
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-10
                risk_score = max(0, min(10, risk_score))
                
                return risk_score, components
            
            def _calculate_history_score(self, data: Dict) -> float:
                """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
                total_cases = data.get('total_cases', 0)
                criminal_count = data.get('criminal_count', 0)
                admin_count = data.get('admin_count', 0)
                
                if total_cases == 0:
                    return 0
                elif total_cases <= 2:
                    base_score = 2
                elif total_cases <= 5:
                    base_score = 4
                elif total_cases <= 10:
                    base_score = 6
                else:
                    base_score = 8
                
                if criminal_count > 0:
                    criminal_ratio = criminal_count / total_cases
                    base_score += criminal_ratio * 2
                
                return min(10, base_score)
            
            def _calculate_time_score(self, data: Dict) -> float:
                """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
                days_since_last = data.get('days_since_last', 365)
                
                if days_since_last < 30:
                    time_score = 10
                elif days_since_last < 90:
                    time_score = 8
                elif days_since_last < 180:
                    time_score = 6
                elif days_since_last < 365:
                    time_score = 4
                else:
                    time_score = 2
                
                recidivism_rate = data.get('recidivism_rate', 0)
                if recidivism_rate > 2:
                    time_score = min(10, time_score + 2)
                
                return time_score
            
            def _calculate_age_score(self, data: Dict) -> float:
                """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
                age = data.get('current_age', 35)
                age_at_first = data.get('age_at_first_violation', age)
                
                if 18 <= age <= 25:
                    base_score = 8
                elif 26 <= age <= 35:
                    base_score = 6
                elif 36 <= age <= 45:
                    base_score = 4
                else:
                    base_score = 2
                
                if age_at_first < 18:
                    base_score += 3
                elif age_at_first < 21:
                    base_score += 2
                elif age_at_first < 25:
                    base_score += 1
                
                return min(10, base_score)
            
            def _calculate_social_score(self, data: Dict) -> float:
                """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
                score = 5
                
                if data.get('has_property', 0) == 1:
                    score -= 2
                if data.get('has_job', 0) == 1:
                    score -= 2
                if data.get('has_family', 0) == 1:
                    score -= 1
                
                if data.get('has_property', 0) == 0:
                    score += 1
                if data.get('has_job', 0) == 0:
                    score += 1
                if data.get('substance_abuse', 0) == 1:
                    score += 2
                
                return max(0, min(10, score))
            
            def _calculate_escalation_score(self, data: Dict) -> float:
                """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
                has_escalation = data.get('has_escalation', 0)
                admin_to_criminal = data.get('admin_to_criminal', 0)
                
                if has_escalation:
                    if admin_to_criminal > 2:
                        return 9
                    elif admin_to_criminal > 0:
                        return 7
                    else:
                        return 5
                else:
                    if data.get('admin_count', 0) > 5:
                        return 4
                    else:
                        return 2
            
            def get_risk_level(self, risk_score: float) -> Tuple[str, str]:
                """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
                if risk_score >= 7:
                    return "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", "–¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
                elif risk_score >= 5:
                    return "üü° –í—ã—Å–æ–∫–∏–π", "–£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
                elif risk_score >= 3:
                    return "üü† –°—Ä–µ–¥–Ω–∏–π", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å"
                else:
                    return "üü¢ –ù–∏–∑–∫–∏–π", "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å"
        
        BackendCalculator = SimplifiedRiskCalculator
        print("‚úÖ Backend –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ backend –º–æ–¥—É–ª–µ–π: {e}")
        return False
    
    # –ò–º–ø–æ—Ä—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    try:
        from risk_calculator import RiskCalculator as OriginalCalculator
        print("‚úÖ Utils –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True
        
    except ImportError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å utils –º–æ–¥—É–ª–∏: {e}")
        OriginalCalculator = None
        return True
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def generate_test_cases() -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    return [
        {
            'name': '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω (–æ—Å–Ω–æ–≤–Ω–æ–π)',
            'data': {
                'pattern_type': 'mixed_unstable',
                'total_cases': 5,
                'criminal_count': 2,
                'admin_count': 3,
                'days_since_last': 60,
                'current_age': 28,
                'age_at_first_violation': 21,
                'has_property': 0,
                'has_job': 1,
                'has_family': 0,
                'substance_abuse': 0,
                'has_escalation': 0,
                'admin_to_criminal': 1,
                'recidivism_rate': 1.5
            }
        },
        {
            'name': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ (—ç—Å–∫–∞–ª–∞—Ü–∏—è)',
            'data': {
                'pattern_type': 'escalating',
                'total_cases': 12,
                'criminal_count': 5,
                'admin_count': 7,
                'days_since_last': 25,
                'current_age': 22,
                'age_at_first_violation': 16,
                'has_property': 0,
                'has_job': 0,
                'has_family': 0,
                'substance_abuse': 1,
                'has_escalation': 1,
                'admin_to_criminal': 3,
                'recidivism_rate': 3.2
            }
        },
        {
            'name': '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ (–¥–µ—ç—Å–∫–∞–ª–∞—Ü–∏—è)',
            'data': {
                'pattern_type': 'deescalating',
                'total_cases': 2,
                'criminal_count': 0,
                'admin_count': 2,
                'days_since_last': 300,
                'current_age': 45,
                'age_at_first_violation': 40,
                'has_property': 1,
                'has_job': 1,
                'has_family': 1,
                'substance_abuse': 0,
                'has_escalation': 0,
                'admin_to_criminal': 0,
                'recidivism_rate': 0.1
            }
        }
    ]


def compare_risk_calculations(test_cases: List[Dict]) -> List[Dict]:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞—Å—á–µ—Ç—ã —Ä–∏—Å–∫–æ–≤ –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏"""
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ê–°–ß–ï–¢–û–í –†–ò–°–ö–û–í")
    print("=" * 80)
    
    results = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüß™ –¢–µ—Å—Ç {i}: {test_case['name']}")
        
        result = {
            'test_name': test_case['name'],
            'backend_result': None,
            'original_result': None,
            'comparison': {},
            'errors': []
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º backend –≤–µ—Ä—Å–∏—é
        try:
            start_time = time.perf_counter()
            backend_calc = BackendCalculator()
            backend_risk_score, backend_components = backend_calc.calculate_risk_score(test_case['data'])
            backend_level, backend_rec = backend_calc.get_risk_level(backend_risk_score)
            backend_time = (time.perf_counter() - start_time) * 1000
            
            result['backend_result'] = {
                'risk_score': backend_risk_score,
                'components': backend_components,
                'risk_level': backend_level,
                'recommendation': backend_rec,
                'calculation_time_ms': backend_time
            }
            
            print(f"   ‚úÖ Backend: {backend_risk_score:.3f} ({backend_level}) [{backend_time:.1f}ms]")
            
        except Exception as e:
            error_msg = f"Backend –æ—à–∏–±–∫–∞: {e}"
            result['errors'].append(error_msg)
            print(f"   ‚ùå Backend –æ—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
        if OriginalCalculator is not None:
            try:
                start_time = time.perf_counter()
                original_calc = OriginalCalculator()
                original_risk_score, original_components = original_calc.calculate_risk_score(test_case['data'])
                original_level, original_rec = original_calc.get_risk_level(original_risk_score)
                original_time = (time.perf_counter() - start_time) * 1000
                
                result['original_result'] = {
                    'risk_score': original_risk_score,
                    'components': original_components,
                    'risk_level': original_level,
                    'recommendation': original_rec,
                    'calculation_time_ms': original_time
                }
                
                print(f"   ‚úÖ Utils:   {original_risk_score:.3f} ({original_level}) [{original_time:.1f}ms]")
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if result['backend_result']:
                    risk_diff = abs(backend_risk_score - original_risk_score)
                    
                    result['comparison'] = {
                        'risk_score_difference': risk_diff,
                        'risk_scores_match': risk_diff < 0.001,
                        'levels_match': backend_level == original_level,
                        'recommendations_match': backend_rec == original_rec,
                        'performance_ratio': backend_time / original_time if original_time > 0 else 1.0
                    }
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    if risk_diff < 0.001:
                        print(f"   üéâ –ò–î–ï–ù–¢–ò–ß–ù–û (—Ä–∞–∑–Ω–∏—Ü–∞: {risk_diff:.6f})")
                    elif risk_diff < 0.01:
                        print(f"   ‚ö†Ô∏è –ù–µ–±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {risk_diff:.6f}")
                    else:
                        print(f"   üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –†–ê–ó–ù–ò–¶–ê: {risk_diff:.6f}")
                        result['errors'].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ä–∏—Å–∫-–±–∞–ª–ª–∞—Ö: {risk_diff}")
                
            except Exception as e:
                error_msg = f"Utils –æ—à–∏–±–∫–∞: {e}"
                result['errors'].append(error_msg)
                print(f"   ‚ùå Utils –æ—à–∏–±–∫–∞: {e}")
        else:
            print("   ‚ö†Ô∏è Utils –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        results.append(result)
    
    return results


def print_final_summary(results: List[Dict]):
    """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É"""
    print("\n" + "=" * 80)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –°–†–ê–í–ù–ï–ù–ò–Ø")
    print("=" * 80)
    
    total_tests = len(results)
    total_errors = sum(len(r['errors']) for r in results)
    identical_calculations = sum(1 for r in results 
                               if r['comparison'].get('risk_scores_match', False))
    critical_differences = sum(1 for r in results 
                             if r['comparison'].get('risk_score_difference', 0) > 0.01)
    
    print(f"üß™ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
    
    if OriginalCalculator is not None:
        print(f"üéâ –ò–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã: {identical_calculations}")
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è: {critical_differences}")
        
        if critical_differences == 0:
            print("\n‚úÖ –í–°–ï –†–ê–°–ß–ï–¢–´ –ü–†–û–®–õ–ò –ü–†–û–í–ï–†–ö–£!")
            print("   –ü–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—É")
        else:
            print(f"\nüí• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ê–ó–õ–ò–ß–ò–Ø!")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    else:
        print("\n‚ö†Ô∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        if total_errors == 0:
            print("‚úÖ Backend –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("üí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ backend –≤–µ—Ä—Å–∏–∏")
    
    print("=" * 80)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print("üîç –£–ü–†–û–©–ï–ù–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –†–ê–°–ß–ï–¢–û–í –†–ò–°–ö–û–í")
    print("=" * 80)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    if not setup_imports():
        print("üí• –ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return 1
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
    test_cases = generate_test_cases()
    print(f"\nüìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(test_cases)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤")
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        results = compare_risk_calculations(test_cases)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        print_final_summary(results)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è
        critical_differences = sum(1 for r in results 
                                 if r['comparison'].get('risk_score_difference', 0) > 0.01)
        total_errors = sum(len(r['errors']) for r in results)
        
        if critical_differences > 0 or total_errors > 0:
            return 1
        else:
            return 0
            
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–†–ê–í–ù–ï–ù–ò–Ø: {e}")
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)