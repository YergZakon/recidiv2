#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RiskCalculator –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys
import os
from typing import Dict, List, Tuple
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
from app.core.constants import (
    RISK_WEIGHTS, PATTERN_RISKS, PREVENTION_RATES, CRIME_TIME_WINDOWS,
    RISK_THRESHOLD_CRITICAL, RISK_THRESHOLD_HIGH, RISK_THRESHOLD_MEDIUM
)

# –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é –≤–µ—Ä—Å–∏—é RiskCalculator
class StandaloneRiskCalculator:
    """
    –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è RiskCalculator - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ backend
    """
    
    def __init__(self):
        self.weights = RISK_WEIGHTS
        self.pattern_risks = PATTERN_RISKS
    
    def calculate_risk_score(self, person_data: Dict) -> Tuple[float, Dict]:
        """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend/app/services/risk_service.py"""
        components = {}
        
        # 1. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        pattern = person_data.get('pattern_type', 'unknown')
        pattern_score = self.pattern_risks.get(pattern, 0.5) * 10
        components['pattern'] = pattern_score * self.weights['pattern_weight']
        
        # 2. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π
        history_score = self._calculate_history_score(person_data)
        components['history'] = history_score * self.weights['history_weight']
        
        # 3. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        time_score = self._calculate_time_score(person_data)
        components['time'] = time_score * self.weights['time_weight']
        
        # 4. –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        age_score = self._calculate_age_score(person_data)
        components['age'] = age_score * self.weights['age_weight']
        
        # 5. –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        social_score = self._calculate_social_score(person_data)
        components['social'] = social_score * self.weights['social_weight']
        
        # 6. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        escalation_score = self._calculate_escalation_score(person_data)
        components['escalation'] = escalation_score * self.weights['escalation_weight']
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫-–±–∞–ª–ª
        risk_score = sum(components.values())
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-10
        risk_score = max(0, min(10, risk_score))
        
        return risk_score, components
    
    def _calculate_history_score(self, data: Dict) -> float:
        """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
        total_cases = data.get('total_cases', 0)
        criminal_count = data.get('criminal_count', 0)
        admin_count = data.get('admin_count', 0)
        
        if total_cases == 0:
            return 0
        elif total_cases <= 2:
            base_score = 2
        elif total_cases <= 5:
            base_score = 4
        elif total_cases <= 10:
            base_score = 6
        else:
            base_score = 8
        
        if criminal_count > 0:
            criminal_ratio = criminal_count / total_cases
            base_score += criminal_ratio * 2
        
        return min(10, base_score)
    
    def _calculate_time_score(self, data: Dict) -> float:
        """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
        days_since_last = data.get('days_since_last', 365)
        
        if days_since_last < 30:
            time_score = 10
        elif days_since_last < 90:
            time_score = 8
        elif days_since_last < 180:
            time_score = 6
        elif days_since_last < 365:
            time_score = 4
        else:
            time_score = 2
        
        recidivism_rate = data.get('recidivism_rate', 0)
        if recidivism_rate > 2:
            time_score = min(10, time_score + 2)
        
        return time_score
    
    def _calculate_age_score(self, data: Dict) -> float:
        """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
        age = data.get('current_age', 35)
        age_at_first = data.get('age_at_first_violation', age)
        
        if 18 <= age <= 25:
            base_score = 8
        elif 26 <= age <= 35:
            base_score = 6
        elif 36 <= age <= 45:
            base_score = 4
        else:
            base_score = 2
        
        if age_at_first < 18:
            base_score += 3
        elif age_at_first < 21:
            base_score += 2
        elif age_at_first < 25:
            base_score += 1
        
        return min(10, base_score)
    
    def _calculate_social_score(self, data: Dict) -> float:
        """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
        score = 5
        
        if data.get('has_property', 0) == 1:
            score -= 2
        if data.get('has_job', 0) == 1:
            score -= 2
        if data.get('has_family', 0) == 1:
            score -= 1
        
        if data.get('has_property', 0) == 0:
            score += 1
        if data.get('has_job', 0) == 0:
            score += 1
        if data.get('substance_abuse', 0) == 1:
            score += 2
        
        return max(0, min(10, score))
    
    def _calculate_escalation_score(self, data: Dict) -> float:
        """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
        has_escalation = data.get('has_escalation', 0)
        admin_to_criminal = data.get('admin_to_criminal', 0)
        
        if has_escalation:
            if admin_to_criminal > 2:
                return 9
            elif admin_to_criminal > 0:
                return 7
            else:
                return 5
        else:
            if data.get('admin_count', 0) > 5:
                return 4
            else:
                return 2
    
    def get_risk_level(self, risk_score: float) -> Tuple[str, str]:
        """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
        if risk_score >= 7:
            return "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", "–¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
        elif risk_score >= 5:
            return "üü° –í—ã—Å–æ–∫–∏–π", "–£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        elif risk_score >= 3:
            return "üü† –°—Ä–µ–¥–Ω–∏–π", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å"
        else:
            return "üü¢ –ù–∏–∑–∫–∏–π", "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å"


class StandaloneCrimeForecaster:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è CrimeForecaster"""
    
    def __init__(self):
        self.risk_calculator = StandaloneRiskCalculator()
        self.base_windows = CRIME_TIME_WINDOWS
    
    def forecast_crime_timeline(self, person_data: Dict) -> Dict[str, Dict]:
        """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
        forecasts = {}
        
        for crime_type, base_days in self.base_windows.items():
            forecast = self._calculate_single_forecast(person_data, crime_type, base_days)
            forecasts[crime_type] = forecast
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –¥–æ —Å–æ–±—ã—Ç–∏—è
        sorted_forecasts = dict(sorted(forecasts.items(), key=lambda x: x[1]['days']))
        
        return sorted_forecasts
    
    def _calculate_single_forecast(self, person_data: Dict, crime_type: str, base_days: int) -> Dict:
        """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
        # –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        age_modifier = self._get_age_modifier(person_data)
        pattern_modifier = self._get_pattern_modifier(person_data, crime_type)
        social_modifier = self._get_social_modifier(person_data)
        
        # –†–∞—Å—á–µ—Ç –¥–Ω–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
        try:
            forecast_days = int(base_days * age_modifier * pattern_modifier * social_modifier)
            forecast_days = max(30, min(365, forecast_days))
        except (TypeError, ValueError):
            forecast_days = int(base_days)
            forecast_days = max(30, min(365, forecast_days))
        
        # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        ci_lower = int(forecast_days * 0.7)
        ci_upper = int(forecast_days * 1.4)
        
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        base_prob = PREVENTION_RATES.get(crime_type, 50.0)
        risk_score, _ = self.risk_calculator.calculate_risk_score(person_data)
        probability = base_prob * (risk_score / 10)
        probability = max(5, min(95, probability))
        
        # –î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        try:
            forecast_date = datetime.now() + timedelta(days=forecast_days)
        except (TypeError, ValueError):
            forecast_date = datetime.now() + timedelta(days=base_days)
        
        # –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence = self._calculate_confidence(person_data, crime_type)
        
        return {
            'crime_type': crime_type,
            'days': forecast_days,
            'date': forecast_date,
            'probability': float(probability),
            'ci_lower': ci_lower,
            'ci_upper': ci_upper,
            'confidence': confidence,
            'risk_level': self._get_timeline_risk_level(forecast_days)
        }
    
    def _get_age_modifier(self, data: Dict) -> float:
        """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
        age = data.get('current_age', 35)
        
        if age < 25:
            return 0.8
        elif age < 35:
            return 0.9
        elif age < 45:
            return 1.1
        else:
            return 1.3
    
    def _get_pattern_modifier(self, data: Dict, crime_type: str) -> float:
        """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
        pattern = data.get('pattern_type', 'unknown')
        
        modifiers = {
            'mixed_unstable': 0.9,
            'chronic_criminal': 0.7,
            'escalating': 0.6,
            'deescalating': 1.3,
            'single': 1.5,
            'unknown': 1.0
        }
        
        base_modifier = modifiers.get(pattern, 1.0)
        
        if pattern == 'chronic_criminal' and crime_type in ['–ö—Ä–∞–∂–∞', '–ì—Ä–∞–±–µ–∂']:
            base_modifier *= 0.9
        elif pattern == 'escalating' and crime_type in ['–†–∞–∑–±–æ–π', '–£–±–∏–π—Å—Ç–≤–æ']:
            base_modifier *= 0.8
        
        return base_modifier
    
    def _get_social_modifier(self, data: Dict) -> float:
        """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
        modifier = 1.0
        
        if data.get('has_property', 0) == 0:
            modifier *= 0.85
        if data.get('has_job', 0) == 0:
            modifier *= 0.9
        if data.get('substance_abuse', 0) == 1:
            modifier *= 0.8
        
        return modifier
    
    def _calculate_confidence(self, data: Dict, crime_type: str) -> str:
        """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
        factors = 0
        
        if data.get('total_cases', 0) > 5:
            factors += 1
        if data.get('pattern_type', 'unknown') != 'unknown':
            factors += 1
        if data.get('has_escalation', 0) == 1:
            factors += 1
        
        if factors >= 3:
            return "–í—ã—Å–æ–∫–∞—è"
        elif factors >= 2:
            return "–°—Ä–µ–¥–Ω—è—è"
        else:
            return "–ù–∏–∑–∫–∞—è"
    
    def _get_timeline_risk_level(self, days: int) -> str:
        """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ backend"""
        if days < 60:
            return "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥"
        elif days < 120:
            return "üü° –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        elif days < 180:
            return "üü† –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
        else:
            return "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"


def standalone_quick_assessment(person_data: Dict) -> Dict:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞"""
    calculator = StandaloneRiskCalculator()
    risk_score, components = calculator.calculate_risk_score(person_data)
    risk_level, recommendation = calculator.get_risk_level(risk_score)
    
    forecaster = StandaloneCrimeForecaster()
    forecasts = forecaster.forecast_crime_timeline(person_data)
    
    if forecasts:
        most_likely = next(iter(forecasts.values()))
    else:
        most_likely = None
    
    return {
        'risk_score': risk_score,
        'risk_level': risk_level,
        'recommendation': recommendation,
        'components': components,
        'most_likely_crime': most_likely
    }


def test_standalone_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ù–û–ú–ù–û–ì–û RISK CALCULATOR")
    print("=" * 80)
    
    tests_passed = 0
    tests_failed = 0
    
    # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print("\nüß™ –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
    try:
        calc = StandaloneRiskCalculator()
        assert calc.weights == RISK_WEIGHTS
        assert calc.pattern_risks == PATTERN_RISKS
        
        weights_sum = sum(calc.weights.values())
        assert abs(weights_sum - 1.0) < 0.001
        
        print("   ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        tests_passed += 1
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        tests_failed += 1
    
    # –¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
    print("\nüß™ –¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞")
    try:
        calc = StandaloneRiskCalculator()
        
        person_data = {
            'pattern_type': 'mixed_unstable',
            'total_cases': 5,
            'criminal_count': 2,
            'admin_count': 3,
            'days_since_last': 60,
            'current_age': 28,
            'age_at_first_violation': 21,
            'has_property': 0,
            'has_job': 1,
            'has_family': 0,
            'substance_abuse': 0,
            'has_escalation': 0,
            'admin_to_criminal': 1,
            'recidivism_rate': 1.5
        }
        
        risk_score, components = calc.calculate_risk_score(person_data)
        
        assert 0 <= risk_score <= 10
        assert isinstance(components, dict)
        assert len(components) == 6
        
        expected_components = ['pattern', 'history', 'time', 'age', 'social', 'escalation']
        for comp in expected_components:
            assert comp in components
        
        print(f"   ‚úÖ –†–∏—Å–∫-–±–∞–ª–ª: {risk_score:.3f}, –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        tests_passed += 1
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        tests_failed += 1
    
    # –¢–µ—Å—Ç 3: –£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞
    print("\nüß™ –¢–µ—Å—Ç 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞")
    try:
        calc = StandaloneRiskCalculator()
        
        test_cases = [
            (8.5, "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"),
            (6.0, "üü° –í—ã—Å–æ–∫–∏–π"), 
            (4.0, "üü† –°—Ä–µ–¥–Ω–∏–π"),
            (1.5, "üü¢ –ù–∏–∑–∫–∏–π")
        ]
        
        for score, expected_level in test_cases:
            level, recommendation = calc.get_risk_level(score)
            assert level == expected_level, f"–î–ª—è {score} –æ–∂–∏–¥–∞–ª—Å—è {expected_level}, –ø–æ–ª—É—á–µ–Ω {level}"
        
        print(f"   ‚úÖ –í—Å–µ {len(test_cases)} —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        tests_passed += 1
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π: {e}")
        tests_failed += 1
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π")
    try:
        forecaster = StandaloneCrimeForecaster()
        
        person_data = {
            'pattern_type': 'mixed_unstable',
            'total_cases': 3,
            'current_age': 25,
            'has_property': 0,
            'has_job': 1,
            'substance_abuse': 0
        }
        
        forecasts = forecaster.forecast_crime_timeline(person_data)
        
        expected_crimes = set(CRIME_TIME_WINDOWS.keys())
        actual_crimes = set(forecasts.keys())
        assert expected_crimes == actual_crimes
        
        for crime_type, forecast in forecasts.items():
            assert isinstance(forecast, dict)
            assert 'days' in forecast
            assert 'probability' in forecast
            assert 'confidence' in forecast
            assert 30 <= forecast['days'] <= 365
            assert 5 <= forecast['probability'] <= 95
        
        print(f"   ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è {len(forecasts)} —Ç–∏–ø–æ–≤ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        tests_passed += 1
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        tests_failed += 1
    
    # –¢–µ—Å—Ç 5: –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\nüß™ –¢–µ—Å—Ç 5: –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞")
    try:
        person_data = {
            'pattern_type': 'escalating',
            'total_cases': 8,
            'criminal_count': 3,
            'current_age': 23,
            'days_since_last': 30
        }
        
        quick_result = standalone_quick_assessment(person_data)
        
        required_keys = ['risk_score', 'risk_level', 'recommendation', 'components', 'most_likely_crime']
        for key in required_keys:
            assert key in quick_result
        
        assert 0 <= quick_result['risk_score'] <= 10
        assert isinstance(quick_result['components'], dict)
        
        print(f"   ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞: {quick_result['risk_score']:.3f} ({quick_result['risk_level']})")
        tests_passed += 1
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏: {e}")
        tests_failed += 1
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 80)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_failed}")
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {tests_passed + tests_failed}")
    
    if tests_failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("   –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π RiskCalculator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   –ü–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ utils/ –≤ backend/ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–æ—á–Ω–æ")
        return 0
    else:
        print(f"\nüí• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
        return 1


if __name__ == "__main__":
    exit_code = test_standalone_functionality()
    sys.exit(exit_code)