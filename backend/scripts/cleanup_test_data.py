#!/usr/bin/env python3
"""
–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö/–¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ Excel

–ö–†–ò–¢–ò–ß–ù–û: 
- –ù–ï —É–¥–∞–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (persons_real, etc.)
- –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ/–¥–µ–º–æ —Ç–∞–±–ª–∏—Ü—ã
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.core.database import SessionLocal, engine
from app.models.real_data import PersonReal
from sqlalchemy import text, inspect
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def get_all_tables():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –ë–î"""
    inspector = inspect(engine)
    return inspector.get_table_names()

def identify_table_types():
    """–†–∞–∑–¥–µ–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ"""
    all_tables = get_all_tables()
    
    # –¢–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–ù–ï –£–î–ê–õ–Ø–¢–¨!)
    real_data_tables = {
        'persons_real',           # –†–µ–∞–ª—å–Ω—ã–µ –ª—é–¥–∏ –∏–∑ Excel
        'violations_real',        # –†–µ–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        'crime_transitions',      # –ü–µ—Ä–µ—Ö–æ–¥—ã –∞–¥–º–∏–Ω->—É–≥–æ–ª–æ–≤–∫–∞
        'crime_time_windows',     # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π
        'risk_assessment_history', # –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤
        'alembic_version'         # –í–µ—Ä—Å–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π
    }
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã PostgreSQL
    system_tables = {
        'pg_stat_statements',
        'spatial_ref_sys'
    }
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    real_tables = []
    test_tables = []
    system_tables_found = []
    
    for table in all_tables:
        if table in real_data_tables:
            real_tables.append(table)
        elif any(sys_table in table for sys_table in system_tables):
            system_tables_found.append(table)
        else:
            test_tables.append(table)
    
    return real_tables, test_tables, system_tables_found

def check_real_data_exists(db):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –ë–î"""
    try:
        count = db.query(PersonReal).count()
        return count > 0, count
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False, 0

def backup_critical_data(db, backup_info):
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        total_persons = db.query(PersonReal).count()
        
        if total_persons > 0:
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            high_risk = db.query(PersonReal).filter(
                PersonReal.risk_total_risk_score >= 7
            ).count()
            
            backup_info['real_data_stats'] = {
                'total_persons': total_persons,
                'high_risk_persons': high_risk,
                'backup_timestamp': datetime.utcnow().isoformat()
            }
            
            logger.info(f"üìä –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {total_persons:,} –ª—é–¥–µ–π, {high_risk:,} –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫")
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def drop_test_tables(db, test_tables):
    """–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    dropped_count = 0
    errors = []
    
    for table in test_tables:
        try:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table}...")
            db.execute(text(f"DROP TABLE IF EXISTS {table} CASCADE"))
            dropped_count += 1
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {table}: {e}"
            logger.error(error_msg)
            errors.append(error_msg)
    
    if dropped_count > 0:
        db.commit()
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {dropped_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü")
    
    return dropped_count, errors

def verify_cleanup(db):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏"""
    real_tables, test_tables, system_tables = identify_table_types()
    
    verification_results = {
        'real_data_preserved': True,
        'test_data_removed': True,
        'errors': []
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    try:
        persons_count = db.query(PersonReal).count()
        if persons_count == 0:
            verification_results['real_data_preserved'] = False
            verification_results['errors'].append("‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ª—é–¥—è—Ö –ø–æ—Ç–µ—Ä—è–Ω—ã!")
        else:
            logger.info(f"‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {persons_count:,} —á–µ–ª–æ–≤–µ–∫")
    except Exception as e:
        verification_results['real_data_preserved'] = False
        verification_results['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã
    remaining_tables = get_all_tables()
    remaining_test_tables = [t for t in remaining_tables if t not in real_tables and not any(sys in t for sys in ['pg_', 'spatial_'])]
    
    if remaining_test_tables:
        logger.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {remaining_test_tables}")
        verification_results['test_data_removed'] = False
        verification_results['remaining_test_tables'] = remaining_test_tables
    
    return verification_results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏"""
    
    print("=" * 60)
    print("üßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("   –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    backup_info = {}
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        has_real_data, real_count = check_real_data_exists(db)
        
        if not has_real_data:
            logger.error("‚ùå –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            logger.error("–°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ: python scripts/initial_import.py")
            return 1
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {real_count:,} —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
        logger.info("üìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü –≤ –ë–î...")
        real_tables, test_tables, system_tables = identify_table_types()
        
        print(f"\nüìã –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶:")
        print(f"–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({len(real_tables)}): {', '.join(real_tables)}")
        print(f"–¢–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã ({len(test_tables)}): {', '.join(test_tables)}")
        print(f"–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã ({len(system_tables)}): {', '.join(system_tables)}")
        
        if not test_tables:
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return 0
        
        # 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã {len(test_tables)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü:")
        for table in test_tables:
            print(f"  - {table}")
        
        print(f"\n‚úÖ –ë—É–¥—É—Ç –°–û–•–†–ê–ù–ï–ù–´ {len(real_tables)} —Ç–∞–±–ª–∏—Ü —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
        for table in real_tables:
            print(f"  - {table}")
        
        response = input(f"\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ {len(test_tables)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü? (y/N): ")
        if response.lower() not in ['y', 'yes', '–¥–∞']:
            logger.info("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return 0
        
        # 4. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        if not backup_critical_data(db, backup_info):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
            return 1
        
        # 5. –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        dropped_count, errors = drop_test_tables(db, test_tables)
        
        if errors:
            logger.warning(f"‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:")
            for error in errors:
                logger.warning(f"  {error}")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—á–∏—Å—Ç–∫–∏...")
        verification = verify_cleanup(db)
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ß–ò–°–¢–ö–ò")
        print("=" * 60)
        
        print(f"–£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü: {dropped_count}")
        print(f"–û—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {len(errors)}")
        print(f"–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {'‚úÖ' if verification['real_data_preserved'] else '‚ùå'}")
        print(f"–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã: {'‚úÖ' if verification['test_data_removed'] else '‚ùå'}")
        
        if backup_info.get('real_data_stats'):
            stats = backup_info['real_data_stats']
            print(f"\nüìà –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            print(f"  - –í—Å–µ–≥–æ –ª—é–¥–µ–π: {stats['total_persons']:,}")
            print(f"  - –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: {stats['high_risk_persons']:,}")
        
        if verification['errors']:
            print(f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:")
            for error in verification['errors']:
                print(f"  - {error}")
        
        if verification.get('remaining_test_tables'):
            print(f"\n‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å —Ç–∞–±–ª–∏—Ü—ã (—Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è):")
            for table in verification['remaining_test_tables']:
                print(f"  - {table}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        if verification['real_data_preserved'] and verification['test_data_removed']:
            print("\n‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            return 0
        else:
            print("\n‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
            return 2
    
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        db.rollback()
        return 1
        
    finally:
        db.close()

if __name__ == "__main__":
    exit_code = main()
    
    if exit_code == 0:
        print(f"\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: uvicorn app.main:app --reload")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API: GET /api/persons/real/statistics")
        print("3. –°–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
    elif exit_code == 2:
        print(f"\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–∞–±–ª–∏—Ü—ã")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    
    sys.exit(exit_code)