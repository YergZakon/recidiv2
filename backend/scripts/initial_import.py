#!/usr/bin/env python3
"""
–ü–µ—Ä–≤–∏—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
–ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î

–ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:
- 146,570 –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–π
- 12,333 —Ä–µ—Ü–∏–¥–∏–≤–∏—Å—Ç–æ–≤  
- 72.7% –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
- 6,465 –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∞–¥–º–∏–Ω->–∫—Ä–∞–∂–∞
- 97% –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–º—ã—Ö –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.core.database import SessionLocal, engine
from app.models.real_data import Base, PersonReal, CrimeTransition, CrimeTimeWindow
from app.services.data_import_service import DataImportService
from pathlib import Path
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_prerequisites():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"""
    data_dir = Path("data")
    
    if not data_dir.exists():
        logger.error(f"‚ùå –ü–∞–ø–∫–∞ {data_dir.absolute()} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        logger.info("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É 'data' –≤ –∫–æ—Ä–Ω–µ backend –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ Excel —Ñ–∞–π–ª—ã")
        return False
    
    required_files = [
        "RISK_ANALYSIS_RESULTS.xlsx",  # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å 146,570 –∑–∞–ø–∏—Å—è–º–∏
        "crime_analysis_results.xlsx"   # –§–∞–π–ª —Å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –∞–¥–º–∏–Ω->—É–≥–æ–ª–æ–≤–∫–∞
    ]
    
    missing_files = []
    for filename in required_files:
        filepath = data_dir / filename
        if not filepath.exists():
            missing_files.append(filename)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            size_mb = filepath.stat().st_size / (1024 * 1024)
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω {filename} ({size_mb:.1f} MB)")
    
    if missing_files:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: {missing_files}")
        logger.error(f"–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É {data_dir.absolute()}")
        return False
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    optional_files = [
        "ML_DATASET_COMPLETE.xlsx",
        "serious_crimes_analysis.xlsx",
        "risk_escalation_matrix.xlsx"
    ]
    
    for filename in optional_files:
        filepath = data_dir / filename
        if filepath.exists():
            size_mb = filepath.stat().st_size / (1024 * 1024)
            logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {filename} ({size_mb:.1f} MB)")
        else:
            logger.warning(f"‚ö†Ô∏è –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return True

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î"""
    logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î...")
    try:
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞"""
    
    print("=" * 60)
    print("üöÄ –°–ò–°–¢–ï–ú–ê –†–ê–ù–ù–ï–ì–û –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø –ü–†–ï–°–¢–£–ü–õ–ï–ù–ò–ô")
    print("   –ü–µ—Ä–≤–∏—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏—è
    if not check_prerequisites():
        logger.error("‚ùå –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
        return 1
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    if not create_tables():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã. –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
        return 1
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        existing_count = db.query(PersonReal).count()
        if existing_count > 0:
            logger.warning(f"‚ö†Ô∏è –í –ë–î —É–∂–µ –µ—Å—Ç—å {existing_count:,} –∑–∞–ø–∏—Å–µ–π")
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–º–ø–æ—Ä—Ç? (y/n): ")
            if response.lower() != 'y':
                logger.info("–ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return 0
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏–º–ø–æ—Ä—Ç–∞
        service = DataImportService(db)
        
        print("\n" + "=" * 60)
        print("üìä –ò–ú–ü–û–†–¢ –û–°–ù–û–í–ù–´–• –î–ê–ù–ù–´–•")
        print("=" * 60)
        
        # 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ª–∏—Ü–∞—Ö
        logger.info("üìä –ò–º–ø–æ—Ä—Ç RISK_ANALYSIS_RESULTS.xlsx...")
        start_time = datetime.now()
        
        stats = service.import_risk_analysis_results()
        
        elapsed = (datetime.now() - start_time).total_seconds()
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞: {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–ê:")
        print("-" * 40)
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_processed']:,}")
        print(f"–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats['successfully_imported']:,}")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats.get('updated', 0):,}")
        print(f"–û—à–∏–±–æ–∫: {len(stats.get('errors', [])):,}")
        
        if stats.get('warnings'):
            print("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in stats['warnings']:
                print(f"  - {warning}")
        
        # 2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –∞–¥–º–∏–Ω->—É–≥–æ–ª–æ–≤–∫–∞
        print("\n" + "=" * 60)
        print("üìä –ò–ú–ü–û–†–¢ –ü–ï–†–ï–•–û–î–û–í")
        print("=" * 60)
        
        logger.info("üìä –ò–º–ø–æ—Ä—Ç crime_analysis_results.xlsx...")
        transition_stats = service.import_crime_transitions()
        
        if transition_stats.get('status') == 'success':
            logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {transition_stats.get('imported', 0)}")
        else:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–º–ø–æ—Ä—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {transition_stats}")
        
        # 3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
        logger.info("‚è∞ –ò–º–ø–æ—Ä—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω...")
        service.import_time_windows()
        
        # 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        print("\n" + "=" * 60)
        print("üîç –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ö–û–ù–°–¢–ê–ù–¢")
        print("=" * 60)
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total = db.query(PersonReal).count()
        print(f"\nüìä –í—Å–µ–≥–æ –ª—é–¥–µ–π –≤ –ë–î: {total:,}")
        
        expected_total = 146570
        diff = abs(total - expected_total)
        diff_percent = (diff / expected_total * 100) if expected_total > 0 else 100
        
        if diff_percent < 1:
            print(f"‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É ({expected_total:,}) - —Ä–∞–∑–Ω–∏—Ü–∞ {diff_percent:.2f}%")
        else:
            print(f"‚ö†Ô∏è –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ ({expected_total:,}) –Ω–∞ {diff_percent:.1f}%")
        
        # –†–µ—Ü–∏–¥–∏–≤–∏—Å—Ç—ã
        recidivists = db.query(PersonReal).filter(PersonReal.total_cases > 1).count()
        print(f"\nüë• –†–µ—Ü–∏–¥–∏–≤–∏—Å—Ç–æ–≤: {recidivists:,}")
        
        expected_recidivists = 12333
        if abs(recidivists - expected_recidivists) < 500:
            print(f"‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É (~{expected_recidivists:,})")
        else:
            print(f"‚ö†Ô∏è –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ ({expected_recidivists:,})")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
        from sqlalchemy import func
        patterns = db.query(
            PersonReal.pattern_type,
            func.count(PersonReal.id)
        ).group_by(PersonReal.pattern_type).all()
        
        print("\nüîÑ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:")
        total_with_pattern = sum(count for _, count in patterns if _)
        for pattern, count in patterns:
            if pattern:
                percent = (count / total_with_pattern * 100) if total_with_pattern > 0 else 0
                print(f"  - {pattern}: {count:,} ({percent:.1f}%)")
                
                if pattern == 'mixed_unstable':
                    if abs(percent - 72.7) < 5:
                        print(f"    ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º 72.7%")
                    else:
                        print(f"    ‚ö†Ô∏è –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö 72.7%")
        
        # –†–∏—Å–∫-–±–∞–ª–ª—ã
        high_risk = db.query(PersonReal).filter(PersonReal.risk_total_risk_score >= 7).count()
        critical_percent = (high_risk / total * 100) if total > 0 else 0
        print(f"\nüî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ (7+): {high_risk:,} ({critical_percent:.1f}%)")
        
        # –ü–µ—Ä–µ—Ö–æ–¥—ã
        transitions = db.query(CrimeTransition).all()
        admin_to_theft = sum(
            t.transition_count for t in transitions 
            if t.criminal_offense and '–∫—Ä–∞–∂–∞' in t.criminal_offense.lower()
        )
        print(f"\nüîÄ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –∞–¥–º–∏–Ω->–∫—Ä–∞–∂–∞: {admin_to_theft:,}")
        
        expected_transitions = 6465
        if abs(admin_to_theft - expected_transitions) < 100:
            print(f"‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É ({expected_transitions:,})")
        else:
            print(f"‚ö†Ô∏è –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ ({expected_transitions:,})")
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
        time_windows = db.query(CrimeTimeWindow).count()
        print(f"\n‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω: {time_windows}")
        
        print("\n" + "=" * 60)
        print("‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        print("\nüìã –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
        print("-" * 40)
        print(f"–õ—é–¥–µ–π –≤ –ë–î: {total:,}")
        print(f"–†–µ—Ü–∏–¥–∏–≤–∏—Å—Ç–æ–≤: {recidivists:,}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫: {high_risk:,}")
        print(f"–ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {len(transitions)}")
        print(f"–í—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω: {time_windows}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        critical_checks = stats.get('critical_checks', {})
        if critical_checks:
            print("\nüîç –°—Ç–∞—Ç—É—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫:")
            for check, status in critical_checks.items():
                icon = "‚úÖ" if status == 'PASS' else "‚ö†Ô∏è"
                print(f"  {icon} {check}: {status}")
        
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        db.rollback()
        return 1
        
    finally:
        db.close()

if __name__ == "__main__":
    exit_code = main()
    
    if exit_code == 0:
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: uvicorn app.main:app --reload")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: http://localhost:8001/docs")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: GET /api/import/statistics")
        print("4. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
    
    sys.exit(exit_code)