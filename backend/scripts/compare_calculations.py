#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤ –º–µ–∂–¥—É Streamlit (utils/) –∏ FastAPI (backend/) –≤–µ—Ä—Å–∏—è–º–∏

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ê–ñ–ù–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RiskCalculator –Ω–µ –≤–Ω–µ—Å–ª–æ –æ—à–∏–±–æ–∫
–õ—é–±—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö –æ–∑–Ω–∞—á–∞—é—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python backend/scripts/compare_calculations.py
"""

import sys
import os
from typing import Dict, List, Tuple, Any
from decimal import Decimal
import time
import traceback

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

def setup_imports():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    global OriginalCalculator, OriginalForecaster, original_quick_assessment
    global BackendCalculator, BackendForecaster, backend_quick_assessment
    
    print("üîç –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
    
    # –ò–º–ø–æ—Ä—Ç backend –≤–µ—Ä—Å–∏–∏
    try:
        from app.services.risk_service import (
            RiskCalculator as BackendCalculator,
            CrimeForecaster as BackendForecaster,
            quick_risk_assessment as backend_quick_assessment
        )
        print("‚úÖ Backend –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ backend –º–æ–¥—É–ª–µ–π: {e}")
        return False
    
    # –ò–º–ø–æ—Ä—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å utils –º–æ–¥—É–ª–∏
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'utils'))
        
        from risk_calculator import (
            RiskCalculator as OriginalCalculator,
            CrimeForecaster as OriginalForecaster,
            quick_risk_assessment as original_quick_assessment
        )
        print("‚úÖ Utils –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True
        
    except ImportError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å utils –º–æ–¥—É–ª–∏: {e}")
        print("üîÑ –ë—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ backend –≤–µ—Ä—Å–∏—é –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        OriginalCalculator = None
        OriginalForecaster = None
        original_quick_assessment = None
        return True
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        traceback.print_exc()
        return False


def generate_test_cases() -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    return [
        # –°–ª—É—á–∞–π 1: –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç - –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        {
            'name': '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω (–æ—Å–Ω–æ–≤–Ω–æ–π)',
            'data': {
                'pattern_type': 'mixed_unstable',
                'total_cases': 5,
                'criminal_count': 2,
                'admin_count': 3,
                'days_since_last': 60,
                'current_age': 28,
                'age_at_first_violation': 21,
                'has_property': 0,
                'has_job': 1,
                'has_family': 0,
                'substance_abuse': 0,
                'has_escalation': 0,
                'admin_to_criminal': 1,
                'recidivism_rate': 1.5
            }
        },
        
        # –°–ª—É—á–∞–π 2: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ - –º–æ–ª–æ–¥–æ–π —Å —ç—Å–∫–∞–ª–∞—Ü–∏–µ–π
        {
            'name': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ (—ç—Å–∫–∞–ª–∞—Ü–∏—è)',
            'data': {
                'pattern_type': 'escalating',
                'total_cases': 12,
                'criminal_count': 5,
                'admin_count': 7,
                'days_since_last': 25,
                'current_age': 22,
                'age_at_first_violation': 16,
                'has_property': 0,
                'has_job': 0,
                'has_family': 0,
                'substance_abuse': 1,
                'has_escalation': 1,
                'admin_to_criminal': 3,
                'recidivism_rate': 3.2
            }
        },
        
        # –°–ª—É—á–∞–π 3: –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ - –¥–µ—ç—Å–∫–∞–ª–∞—Ü–∏—è
        {
            'name': '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ (–¥–µ—ç—Å–∫–∞–ª–∞—Ü–∏—è)',
            'data': {
                'pattern_type': 'deescalating',
                'total_cases': 2,
                'criminal_count': 0,
                'admin_count': 2,
                'days_since_last': 300,
                'current_age': 45,
                'age_at_first_violation': 40,
                'has_property': 1,
                'has_job': 1,
                'has_family': 1,
                'substance_abuse': 0,
                'has_escalation': 0,
                'admin_to_criminal': 0,
                'recidivism_rate': 0.1
            }
        },
        
        # –°–ª—É—á–∞–π 4: –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫
        {
            'name': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫',
            'data': {
                'pattern_type': 'chronic_criminal',
                'total_cases': 20,
                'criminal_count': 15,
                'admin_count': 5,
                'days_since_last': 45,
                'current_age': 35,
                'age_at_first_violation': 18,
                'has_property': 0,
                'has_job': 0,
                'has_family': 0,
                'substance_abuse': 1,
                'has_escalation': 1,
                'admin_to_criminal': 5,
                'recidivism_rate': 5.0
            }
        },
        
        # –°–ª—É—á–∞–π 5: –ï–¥–∏–Ω–∏—á–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ
        {
            'name': '–ï–¥–∏–Ω–∏—á–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ',
            'data': {
                'pattern_type': 'single',
                'total_cases': 1,
                'criminal_count': 0,
                'admin_count': 1,
                'days_since_last': 500,
                'current_age': 50,
                'age_at_first_violation': 49,
                'has_property': 1,
                'has_job': 1,
                'has_family': 1,
                'substance_abuse': 0,
                'has_escalation': 0,
                'admin_to_criminal': 0,
                'recidivism_rate': 0
            }
        },
        
        # –°–ª—É—á–∞–π 6: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –º–æ–ª–æ–¥–æ–π –≤–æ–∑—Ä–∞—Å—Ç
        {
            'name': '–ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–æ–ª–æ–¥–æ–π)',
            'data': {
                'pattern_type': 'mixed_unstable',
                'total_cases': 10,
                'criminal_count': 5,
                'admin_count': 5,
                'days_since_last': 30,  # –ì—Ä–∞–Ω–∏—Ü–∞ –æ—á–µ–Ω—å –Ω–µ–¥–∞–≤–Ω–æ
                'current_age': 25,      # –ì—Ä–∞–Ω–∏—Ü–∞ –º–æ–ª–æ–¥–æ–π/—Å—Ä–µ–¥–Ω–∏–π
                'age_at_first_violation': 18,  # –ì—Ä–∞–Ω–∏—Ü–∞ –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
                'has_property': 0,
                'has_job': 0,
                'has_family': 1,
                'substance_abuse': 0,
                'has_escalation': 1,
                'admin_to_criminal': 2,
                'recidivism_rate': 2.0  # –ì—Ä–∞–Ω–∏—Ü–∞ >2 –¥–µ–ª –≤ –≥–æ–¥
            }
        },
        
        # –°–ª—É—á–∞–π 7: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        {
            'name': '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
            'data': {
                'pattern_type': 'chronic_criminal',
                'total_cases': 50,
                'criminal_count': 40,
                'admin_count': 10,
                'days_since_last': 5,
                'current_age': 20,
                'age_at_first_violation': 14,
                'has_property': 0,
                'has_job': 0,
                'has_family': 0,
                'substance_abuse': 1,
                'has_escalation': 1,
                'admin_to_criminal': 10,
                'recidivism_rate': 10.0
            }
        }
    ]


def compare_risk_calculations(test_cases: List[Dict]) -> List[Dict]:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞—Å—á–µ—Ç—ã —Ä–∏—Å–∫–æ–≤ –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏"""
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ê–°–ß–ï–¢–û–í –†–ò–°–ö–û–í")
    print("=" * 80)
    
    results = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüß™ –¢–µ—Å—Ç {i}: {test_case['name']}")
        
        result = {
            'test_name': test_case['name'],
            'test_data': test_case['data'],
            'backend_result': None,
            'original_result': None,
            'comparison': {},
            'errors': []
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º backend –≤–µ—Ä—Å–∏—é
        try:
            start_time = time.perf_counter()
            backend_calc = BackendCalculator()
            backend_risk_score, backend_components = backend_calc.calculate_risk_score(test_case['data'])
            backend_level, backend_rec = backend_calc.get_risk_level(backend_risk_score)
            backend_time = (time.perf_counter() - start_time) * 1000
            
            result['backend_result'] = {
                'risk_score': backend_risk_score,
                'components': backend_components,
                'risk_level': backend_level,
                'recommendation': backend_rec,
                'calculation_time_ms': backend_time
            }
            
            print(f"   ‚úÖ Backend: {backend_risk_score:.3f} ({backend_level}) [{backend_time:.1f}ms]")
            
        except Exception as e:
            error_msg = f"Backend –æ—à–∏–±–∫–∞: {e}"
            result['errors'].append(error_msg)
            print(f"   ‚ùå Backend –æ—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if OriginalCalculator is not None:
            try:
                start_time = time.perf_counter()
                original_calc = OriginalCalculator()
                original_risk_score, original_components = original_calc.calculate_risk_score(test_case['data'])
                original_level, original_rec = original_calc.get_risk_level(original_risk_score)
                original_time = (time.perf_counter() - start_time) * 1000
                
                result['original_result'] = {
                    'risk_score': original_risk_score,
                    'components': original_components,
                    'risk_level': original_level,
                    'recommendation': original_rec,
                    'calculation_time_ms': original_time
                }
                
                print(f"   ‚úÖ Utils:   {original_risk_score:.3f} ({original_level}) [{original_time:.1f}ms]")
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if result['backend_result']:
                    risk_diff = abs(backend_risk_score - original_risk_score)
                    
                    result['comparison'] = {
                        'risk_score_difference': risk_diff,
                        'risk_scores_match': risk_diff < 0.001,
                        'levels_match': backend_level == original_level,
                        'recommendations_match': backend_rec == original_rec,
                        'performance_ratio': backend_time / original_time if original_time > 0 else 1.0
                    }
                    
                    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    component_diffs = {}
                    for comp_name in backend_components:
                        if comp_name in original_components:
                            comp_diff = abs(backend_components[comp_name] - original_components[comp_name])
                            component_diffs[comp_name] = comp_diff
                    
                    result['comparison']['component_differences'] = component_diffs
                    max_comp_diff = max(component_diffs.values()) if component_diffs else 0
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    if risk_diff < 0.001 and max_comp_diff < 0.001:
                        print(f"   üéâ –ò–î–ï–ù–¢–ò–ß–ù–û (—Ä–∞–∑–Ω–∏—Ü–∞: {risk_diff:.6f})")
                    elif risk_diff < 0.01:
                        print(f"   ‚ö†Ô∏è –ù–µ–±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {risk_diff:.6f}")
                    else:
                        print(f"   üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –†–ê–ó–ù–ò–¶–ê: {risk_diff:.6f}")
                        result['errors'].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ä–∏—Å–∫-–±–∞–ª–ª–∞—Ö: {risk_diff}")
                
            except Exception as e:
                error_msg = f"Utils –æ—à–∏–±–∫–∞: {e}"
                result['errors'].append(error_msg)
                print(f"   ‚ùå Utils –æ—à–∏–±–∫–∞: {e}")
        else:
            print("   ‚ö†Ô∏è Utils –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        results.append(result)
    
    return results


def compare_forecasting(test_cases: List[Dict]) -> List[Dict]:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏"""
    print("\nüîÆ –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    
    results = []
    
    for i, test_case in enumerate(test_cases[:3], 1):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–ª—É—á–∞—è
        print(f"\nüß™ –ü—Ä–æ–≥–Ω–æ–∑ {i}: {test_case['name']}")
        
        result = {
            'test_name': test_case['name'],
            'backend_forecasts': None,
            'original_forecasts': None,
            'comparison': {},
            'errors': []
        }
        
        # Backend –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            backend_forecaster = BackendForecaster()
            backend_forecasts = backend_forecaster.forecast_crime_timeline(test_case['data'])
            result['backend_forecasts'] = backend_forecasts
            
            # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-3 –ø—Ä–æ–≥–Ω–æ–∑–∞
            sorted_forecasts = sorted(backend_forecasts.items(), key=lambda x: x[1]['days'])[:3]
            print("   Backend –ø—Ä–æ–≥–Ω–æ–∑—ã:")
            for crime, forecast in sorted_forecasts:
                print(f"      {crime}: {forecast['days']}–¥ ({forecast['probability']:.1f}%)")
            
        except Exception as e:
            result['errors'].append(f"Backend –ø—Ä–æ–≥–Ω–æ–∑ –æ—à–∏–±–∫–∞: {e}")
            print(f"   ‚ùå Backend –ø—Ä–æ–≥–Ω–æ–∑ –æ—à–∏–±–∫–∞: {e}")
        
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        if OriginalForecaster is not None:
            try:
                original_forecaster = OriginalForecaster()
                original_forecasts = original_forecaster.forecast_crime_timeline(test_case['data'])
                result['original_forecasts'] = original_forecasts
                
                # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-3 –ø—Ä–æ–≥–Ω–æ–∑–∞
                sorted_forecasts = sorted(original_forecasts.items(), key=lambda x: x[1]['days'])[:3]
                print("   Utils –ø—Ä–æ–≥–Ω–æ–∑—ã:")
                for crime, forecast in sorted_forecasts:
                    print(f"      {crime}: {forecast['days']}–¥ ({forecast['probability']:.1f}%)")
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                if result['backend_forecasts']:
                    forecast_diffs = {}
                    for crime in backend_forecasts:
                        if crime in original_forecasts:
                            days_diff = abs(backend_forecasts[crime]['days'] - original_forecasts[crime]['days'])
                            prob_diff = abs(backend_forecasts[crime]['probability'] - original_forecasts[crime]['probability'])
                            forecast_diffs[crime] = {'days_diff': days_diff, 'prob_diff': prob_diff}
                    
                    result['comparison']['forecast_differences'] = forecast_diffs
                    
                    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è
                    max_days_diff = max(diff['days_diff'] for diff in forecast_diffs.values()) if forecast_diffs else 0
                    max_prob_diff = max(diff['prob_diff'] for diff in forecast_diffs.values()) if forecast_diffs else 0
                    
                    if max_days_diff <= 1 and max_prob_diff <= 0.1:
                        print("   üéâ –ü—Ä–æ–≥–Ω–æ–∑—ã –ò–î–ï–ù–¢–ò–ß–ù–´")
                    else:
                        print(f"   ‚ö†Ô∏è –†–∞–∑–ª–∏—á–∏—è –≤ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö: –¥–Ω–∏¬±{max_days_diff}, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å¬±{max_prob_diff:.1f}%")
                
            except Exception as e:
                result['errors'].append(f"Utils –ø—Ä–æ–≥–Ω–æ–∑ –æ—à–∏–±–∫–∞: {e}")
                print(f"   ‚ùå Utils –ø—Ä–æ–≥–Ω–æ–∑ –æ—à–∏–±–∫–∞: {e}")
        
        results.append(result)
    
    return results


def test_quick_assessment(test_cases: List[Dict]) -> List[Dict]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±—ã—Å—Ç—Ä—É—é –æ—Ü–µ–Ω–∫—É"""
    print("\n‚ö° –¢–ï–°–¢ –ë–´–°–¢–†–û–ô –û–¶–ï–ù–ö–ò")
    print("=" * 80)
    
    results = []
    
    for i, test_case in enumerate(test_cases[:2], 1):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–ª—É—á–∞—è
        print(f"\nüß™ –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ {i}: {test_case['name']}")
        
        result = {
            'test_name': test_case['name'],
            'backend_quick': None,
            'original_quick': None,
            'errors': []
        }
        
        # Backend –±—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞
        try:
            backend_quick = backend_quick_assessment(test_case['data'])
            result['backend_quick'] = backend_quick
            
            print(f"   Backend: {backend_quick['risk_score']:.3f} ({backend_quick['risk_level']})")
            if backend_quick['most_likely_crime']:
                most_likely = backend_quick['most_likely_crime']
                print(f"            –í–µ—Ä–æ—è—Ç–Ω–æ–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {most_likely['crime_type']} –∑–∞ {most_likely['days']}–¥")
            
        except Exception as e:
            result['errors'].append(f"Backend –±—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"   ‚ùå Backend –±—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—à–∏–±–∫–∞: {e}")
        
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞
        if original_quick_assessment is not None:
            try:
                original_quick = original_quick_assessment(test_case['data'])
                result['original_quick'] = original_quick
                
                print(f"   Utils:   {original_quick['risk_score']:.3f} ({original_quick['risk_level']})")
                if original_quick['most_likely_crime']:
                    most_likely = original_quick['most_likely_crime']
                    print(f"            –í–µ—Ä–æ—è—Ç–Ω–æ–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {most_likely['crime_type']} –∑–∞ {most_likely['days']}–¥")
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
                if result['backend_quick']:
                    risk_diff = abs(backend_quick['risk_score'] - original_quick['risk_score'])
                    levels_match = backend_quick['risk_level'] == original_quick['risk_level']
                    
                    if risk_diff < 0.001 and levels_match:
                        print("   üéâ –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –ò–î–ï–ù–¢–ò–ß–ù–ê")
                    else:
                        print(f"   ‚ö†Ô∏è –†–∞–∑–ª–∏—á–∏–µ –≤ –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–µ: {risk_diff:.6f}")
                
            except Exception as e:
                result['errors'].append(f"Utils –±—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—à–∏–±–∫–∞: {e}")
                print(f"   ‚ùå Utils –±—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—à–∏–±–∫–∞: {e}")
        
        results.append(result)
    
    return results


def performance_comparison(test_cases: List[Dict]):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 80)
    
    if OriginalCalculator is None:
        print("‚ö†Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ backend")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ backend
    backend_times = []
    print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Backend (100 —Ä–∞—Å—á–µ—Ç–æ–≤)...")
    
    for _ in range(100):
        start_time = time.perf_counter()
        calc = BackendCalculator()
        calc.calculate_risk_score(test_cases[0]['data'])
        end_time = time.perf_counter()
        backend_times.append((end_time - start_time) * 1000)
    
    backend_avg = sum(backend_times) / len(backend_times)
    backend_min = min(backend_times)
    backend_max = max(backend_times)
    
    print(f"   Backend: —Å—Ä–µ–¥–Ω–µ–µ={backend_avg:.2f}ms, –º–∏–Ω={backend_min:.2f}ms, –º–∞–∫—Å={backend_max:.2f}ms")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    if OriginalCalculator is not None:
        original_times = []
        print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Utils (100 —Ä–∞—Å—á–µ—Ç–æ–≤)...")
        
        for _ in range(100):
            start_time = time.perf_counter()
            calc = OriginalCalculator()
            calc.calculate_risk_score(test_cases[0]['data'])
            end_time = time.perf_counter()
            original_times.append((end_time - start_time) * 1000)
        
        original_avg = sum(original_times) / len(original_times)
        original_min = min(original_times)
        original_max = max(original_times)
        
        print(f"   Utils:   —Å—Ä–µ–¥–Ω–µ–µ={original_avg:.2f}ms, –º–∏–Ω={original_min:.2f}ms, –º–∞–∫—Å={original_max:.2f}ms")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        ratio = backend_avg / original_avg
        if ratio < 1.1:
            print(f"   üéâ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º–∞ (Backend/Utils = {ratio:.2f})")
        elif ratio < 2.0:
            print(f"   ‚ö†Ô∏è Backend –Ω–µ–º–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ (–≤ {ratio:.2f} —Ä–∞–∑–∞)")
        else:
            print(f"   üí• Backend –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ (–≤ {ratio:.2f} —Ä–∞–∑–∞)")


def generate_summary_report(risk_results: List[Dict], forecast_results: List[Dict], 
                          quick_results: List[Dict]) -> Dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    report = {
        'total_tests': len(risk_results),
        'total_errors': 0,
        'critical_differences': 0,
        'identical_calculations': 0,
        'minor_differences': 0,
        'has_original_comparison': OriginalCalculator is not None,
        'test_results': {
            'risk_calculations': risk_results,
            'forecasting': forecast_results,
            'quick_assessment': quick_results
        }
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤
    for result in risk_results:
        if result['errors']:
            report['total_errors'] += len(result['errors'])
        
        if result['comparison']:
            if result['comparison'].get('risk_scores_match', False):
                report['identical_calculations'] += 1
            elif result['comparison'].get('risk_score_difference', 1.0) < 0.01:
                report['minor_differences'] += 1
            else:
                report['critical_differences'] += 1
    
    return report


def print_final_summary(report: Dict):
    """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É"""
    print("\n" + "=" * 80)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –°–†–ê–í–ù–ï–ù–ò–Ø")
    print("=" * 80)
    
    print(f"üß™ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: {report['total_tests']}")
    print(f"‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {report['total_errors']}")
    
    if report['has_original_comparison']:
        print(f"üéâ –ò–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã: {report['identical_calculations']}")
        print(f"‚ö†Ô∏è –ù–µ–±–æ–ª—å—à–∏–µ —Ä–∞–∑–ª–∏—á–∏—è: {report['minor_differences']}")
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è: {report['critical_differences']}")
        
        if report['critical_differences'] == 0:
            print("\n‚úÖ –í–°–ï –†–ê–°–ß–ï–¢–´ –ü–†–û–®–õ–ò –ü–†–û–í–ï–†–ö–£!")
            print("   –ü–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—É")
        else:
            print(f"\nüí• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ê–ó–õ–ò–ß–ò–Ø!")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    else:
        print("\n‚ö†Ô∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        if report['total_errors'] == 0:
            print("‚úÖ Backend –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("üí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ backend –≤–µ—Ä—Å–∏–∏")
    
    print("=" * 80)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –†–ê–°–ß–ï–¢–û–í –†–ò–°–ö–û–í: STREAMLIT vs FASTAPI")
    print("=" * 80)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RiskCalculator –∏–∑ utils/ –≤ backend/")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    if not setup_imports():
        print("üí• –ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return 1
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
    test_cases = generate_test_cases()
    print(f"\nüìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(test_cases)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤")
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        risk_results = compare_risk_calculations(test_cases)
        forecast_results = compare_forecasting(test_cases)
        quick_results = test_quick_assessment(test_cases)
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_comparison(test_cases)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        report = generate_summary_report(risk_results, forecast_results, quick_results)
        print_final_summary(report)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è
        if report['critical_differences'] > 0 or report['total_errors'] > 0:
            return 1
        else:
            return 0
            
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–†–ê–í–ù–ï–ù–ò–Ø: {e}")
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)