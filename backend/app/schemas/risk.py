"""
Pydantic —Å—Ö–µ–º—ã –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Ä–∞—Å—á–µ—Ç—É —Ä–∏—Å–∫–æ–≤

–û–°–ù–û–í–ê–ù–û –ù–ê: –°—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ utils/risk_calculator.py
–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ API

–ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö 
–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

from pydantic import BaseModel, Field, validator
from typing import Optional, Dict, List, Any
from datetime import datetime
from enum import Enum

from app.core.constants import PATTERN_RISKS


class PatternType(str, Enum):
    """–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
    MIXED_UNSTABLE = "mixed_unstable"        # 72.7% –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
    CHRONIC_CRIMINAL = "chronic_criminal"    # 13.6% - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
    ESCALATING = "escalating"                # 7% - –æ–ø–∞—Å–Ω–∞—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è  
    DEESCALATING = "deescalating"            # 5.7% - —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞
    SINGLE = "single"                        # 1% - –µ–¥–∏–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    UNKNOWN = "unknown"                      # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω


class RiskCalculationRequest(BaseModel):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ò–î–ï–ù–¢–ò–ß–ù–ê –≤—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º utils/risk_calculator.py
    """
    
    # –û–°–ù–û–í–ù–ê–Ø –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
    iin: Optional[str] = Field(None, description="–ò–ò–ù —á–µ–ª–æ–≤–µ–∫–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)")
    
    # –ü–ê–¢–¢–ï–†–ù –ü–û–í–ï–î–ï–ù–ò–Ø (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)
    pattern_type: PatternType = Field(
        ..., 
        description="–¢–∏–ø –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ 146,570 –Ω–∞—Ä—É—à–µ–Ω–∏–π"
    )
    
    # –ò–°–¢–û–†–ò–Ø –ù–ê–†–£–®–ï–ù–ò–ô (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)
    total_cases: int = Field(
        ..., 
        ge=0, 
        description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª"
    )
    criminal_count: int = Field(
        0, 
        ge=0, 
        description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–æ–ª–æ–≤–Ω—ã—Ö –¥–µ–ª"
    )
    admin_count: int = Field(
        0, 
        ge=0, 
        description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π"
    )
    
    # –í–†–ï–ú–ï–ù–ù–´–ï –§–ê–ö–¢–û–†–´
    days_since_last: int = Field(
        365, 
        ge=0, 
        description="–î–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è"
    )
    recidivism_rate: float = Field(
        0.0, 
        ge=0.0, 
        description="–î–µ–ª –≤ –≥–æ–¥ (—Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—Ü–∏–¥–∏–≤–∞)"
    )
    
    # –í–û–ó–†–ê–°–¢–ù–´–ï –§–ê–ö–¢–û–†–´ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)
    current_age: int = Field(
        ..., 
        ge=14, 
        le=100, 
        description="–¢–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç"
    )
    age_at_first_violation: Optional[int] = Field(
        None, 
        ge=14, 
        le=100, 
        description="–í–æ–∑—Ä–∞—Å—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞—Ä—É—à–µ–Ω–∏–∏"
    )
    
    # –°–û–¶–ò–ê–õ–¨–ù–´–ï –§–ê–ö–¢–û–†–´ (0/1)
    has_property: int = Field(
        0, 
        ge=0, 
        le=1, 
        description="–ù–∞–ª–∏—á–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞ (0-–Ω–µ—Ç, 1-–µ—Å—Ç—å)"
    )
    has_job: int = Field(
        0, 
        ge=0, 
        le=1, 
        description="–ù–∞–ª–∏—á–∏–µ —Ä–∞–±–æ—Ç—ã (0-–Ω–µ—Ç, 1-–µ—Å—Ç—å)"
    )
    has_family: int = Field(
        0, 
        ge=0, 
        le=1, 
        description="–ù–∞–ª–∏—á–∏–µ —Å–µ–º—å–∏ (0-–Ω–µ—Ç, 1-–µ—Å—Ç—å)"
    )
    substance_abuse: int = Field(
        0, 
        ge=0, 
        le=1, 
        description="–ó–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞–º–∏ (0-–Ω–µ—Ç, 1-–µ—Å—Ç—å)"
    )
    
    # –§–ê–ö–¢–û–†–´ –≠–°–ö–ê–õ–ê–¶–ò–ò
    has_escalation: int = Field(
        0, 
        ge=0, 
        le=1, 
        description="–ù–∞–ª–∏—á–∏–µ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ (0-–Ω–µ—Ç, 1-–µ—Å—Ç—å)"
    )
    admin_to_criminal: int = Field(
        0, 
        ge=0, 
        description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫ —É–≥–æ–ª–æ–≤–Ω—ã–º"
    )
    
    class Config:
        json_schema_extra = {
            "example": {
                "iin": "123456789012",
                "pattern_type": "mixed_unstable",
                "total_cases": 5,
                "criminal_count": 2,
                "admin_count": 3,
                "days_since_last": 45,
                "current_age": 28,
                "age_at_first_violation": 22,
                "has_property": 0,
                "has_job": 1,
                "has_family": 0,
                "substance_abuse": 0,
                "has_escalation": 1,
                "admin_to_criminal": 1,
                "recidivism_rate": 1.2
            }
        }
    
    @validator('criminal_count')
    def validate_criminal_count(cls, v, values):
        """–£–≥–æ–ª–æ–≤–Ω—ã—Ö –¥–µ–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        if 'total_cases' in values and v > values['total_cases']:
            raise ValueError('criminal_count cannot exceed total_cases')
        return v
    
    @validator('admin_count')
    def validate_admin_count(cls, v, values):
        """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        if 'total_cases' in values and v > values['total_cases']:
            raise ValueError('admin_count cannot exceed total_cases')
        return v
    
    @validator('age_at_first_violation')
    def validate_first_violation_age(cls, v, values):
        """–í–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ"""
        if v is not None and 'current_age' in values and v > values['current_age']:
            raise ValueError('age_at_first_violation cannot exceed current_age')
        return v
    
    def to_calculator_dict(self) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è RiskCalculator (–∫–∞–∫ –≤ utils/)"""
        data = self.dict(exclude_none=True)
        
        # –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
        if 'age_at_first_violation' not in data:
            data['age_at_first_violation'] = data['current_age']
        
        # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ admin_count –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if data.get('admin_count') == 0 and data.get('criminal_count', 0) < data.get('total_cases', 0):
            data['admin_count'] = data['total_cases'] - data.get('criminal_count', 0)
            
        return data


class RiskComponentsResponse(BaseModel):
    """–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∏—Å–∫–∞"""
    pattern: float = Field(..., description="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
    history: float = Field(..., description="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π")
    time: float = Field(..., description="–í—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
    age: float = Field(..., description="–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç") 
    social: float = Field(..., description="–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
    escalation: float = Field(..., description="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ç—Å–∫–∞–ª–∞—Ü–∏–∏")


class RiskCalculationResponse(BaseModel):
    """
    –û—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–≤–æ–¥—É utils/risk_calculator.py
    """
    
    # –û–°–ù–û–í–ù–û–ô –†–ï–ó–£–õ–¨–¢–ê–¢
    risk_score: float = Field(
        ..., 
        ge=0, 
        le=10, 
        description="–†–∏—Å–∫-–±–∞–ª–ª –æ—Ç 0 –¥–æ 10"
    )
    risk_level: str = Field(
        ..., 
        description="–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ —Å —ç–º–æ–¥–∑–∏ (üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π, üü° –í—ã—Å–æ–∫–∏–π, üü† –°—Ä–µ–¥–Ω–∏–π, üü¢ –ù–∏–∑–∫–∏–π)"
    )
    risk_category: str = Field(
        ..., 
        description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∏—Å–∫–∞ –±–µ–∑ —ç–º–æ–¥–∑–∏ (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π, –í—ã—Å–æ–∫–∏–π, –°—Ä–µ–¥–Ω–∏–π, –ù–∏–∑–∫–∏–π)"
    )
    recommendation: str = Field(
        ..., 
        description="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ª–∏—Ü–æ–º"
    )
    
    # –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø
    components: RiskComponentsResponse = Field(
        ..., 
        description="–†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —Ä–∏—Å–∫–∞"
    )
    
    # –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï (–¥–ª—è –∞—É–¥–∏—Ç–∞)
    person_data: Dict[str, Any] = Field(
        ..., 
        description="–î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞"
    )
    
    # –ú–ï–¢–ê–î–ê–ù–ù–´–ï
    calculated_at: datetime = Field(
        ..., 
        description="–í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞"
    )
    
    class Config:
        json_schema_extra = {
            "example": {
                "risk_score": 5.76,
                "risk_level": "üü° –í—ã—Å–æ–∫–∏–π",
                "risk_category": "–í—ã—Å–æ–∫–∏–π", 
                "recommendation": "–£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                "components": {
                    "pattern": 2.0,
                    "history": 0.8, 
                    "time": 1.2,
                    "age": 0.8,
                    "social": 0.75,
                    "escalation": 0.21
                },
                "person_data": {
                    "pattern_type": "mixed_unstable",
                    "total_cases": 5,
                    "current_age": 28
                },
                "calculated_at": "2024-01-15T10:30:00"
            }
        }


class CrimeForecastItem(BaseModel):
    """–≠–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è"""
    crime_type: str = Field(..., description="–¢–∏–ø –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è")
    days: int = Field(..., ge=30, le=365, description="–î–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è")
    date: datetime = Field(..., description="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞")
    probability: float = Field(..., ge=5.0, le=95.0, description="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö")
    confidence: str = Field(..., description="–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–í—ã—Å–æ–∫–∞—è, –°—Ä–µ–¥–Ω—è—è, –ù–∏–∑–∫–∞—è)")
    risk_level: str = Field(..., description="–†–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ")
    ci_lower: int = Field(..., description="–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
    ci_upper: int = Field(..., description="–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")


class CrimeForecastResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π"""
    forecasts: List[CrimeForecastItem] = Field(
        ..., 
        description="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏"
    )
    person_iin: Optional[str] = Field(None, description="–ò–ò–ù –ª–∏—Ü–∞")
    total_forecasts: int = Field(..., description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    calculated_at: datetime = Field(..., description="–í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞")
    
    class Config:
        json_schema_extra = {
            "example": {
                "forecasts": [
                    {
                        "crime_type": "–ö—Ä–∞–∂–∞",
                        "days": 89,
                        "date": "2024-04-15T12:00:00",
                        "probability": 65.3,
                        "confidence": "–í—ã—Å–æ–∫–∞—è",
                        "risk_level": "üü° –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫",
                        "ci_lower": 62,
                        "ci_upper": 125
                    }
                ],
                "total_forecasts": 8,
                "calculated_at": "2024-01-15T10:30:00"
            }
        }


class QuickAssessmentResponse(BaseModel):
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞"""
    risk_score: float = Field(..., ge=0, le=10)
    risk_level: str
    recommendation: str
    components: RiskComponentsResponse
    most_likely_crime: Optional[CrimeForecastItem] = Field(
        None, 
        description="–ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
    )
    calculated_at: datetime


class ValidationErrorResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    detail: str
    field_errors: List[Dict[str, str]] = Field(default_factory=list)
    
    
class RiskStatisticsResponse(BaseModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∏—Å–∫–∞–º –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    total_analyzed: int = Field(146570, description="–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π")
    total_recidivists: int = Field(12333, description="–í—Å–µ–≥–æ —Ä–µ—Ü–∏–¥–∏–≤–∏—Å—Ç–æ–≤") 
    preventable_crimes_percent: float = Field(97.0, description="–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–º—ã—Ö –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∏—Å–∫–∞
    risk_distribution: Dict[str, int] = Field(
        default_factory=lambda: {
            "critical": 1856,  # 15%
            "high": 3083,      # 25%
            "medium": 4316,    # 35%
            "low": 3078        # 25%
        }
    )
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    pattern_distribution: Dict[str, float] = Field(
        default_factory=lambda: {
            "mixed_unstable": 72.7,
            "chronic_criminal": 13.6,
            "escalating": 7.0,
            "deescalating": 5.7,
            "single": 1.0
        }
    )
    
    class Config:
        json_schema_extra = {
            "example": {
                "total_analyzed": 146570,
                "total_recidivists": 12333,
                "preventable_crimes_percent": 97.0,
                "risk_distribution": {
                    "critical": 1856,
                    "high": 3083,
                    "medium": 4316,
                    "low": 3078
                },
                "pattern_distribution": {
                    "mixed_unstable": 72.7,
                    "chronic_criminal": 13.6,
                    "escalating": 7.0,
                    "deescalating": 5.7,
                    "single": 1.0
                }
            }
        }


class BatchRiskRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞–∫–µ—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤"""
    persons: List[RiskCalculationRequest] = Field(
        ..., 
        min_items=1, 
        max_items=100, 
        description="–°–ø–∏—Å–æ–∫ –ª–∏—Ü –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 100)"
    )


class BatchRiskResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ø–∞–∫–µ—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç"""
    results: List[RiskCalculationResponse] = Field(..., description="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤")
    total_processed: int = Field(..., description="–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    errors: List[Dict[str, str]] = Field(default_factory=list, description="–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    calculated_at: datetime