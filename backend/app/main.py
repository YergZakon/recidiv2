"""
Crime Prevention System API

–û–°–ù–û–í–ê–ù–û –ù–ê: –ê–Ω–∞–ª–∏–∑–µ 146,570 –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–π –∏ 12,333 —Ä–µ—Ü–∏–¥–∏–≤–∏—Å—Ç–æ–≤
–ü–û–†–¢–ò–†–û–í–ê–ù–û –ò–ó: Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è utils/risk_calculator.py

FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import logging
import traceback
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
from app.api.endpoints import risks, forecasts, statistics, persons, data_import, interventions

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
from app.core.constants import (
    TOTAL_VIOLATIONS_ANALYZED, 
    TOTAL_RECIDIVISTS,
    PREVENTABLE_CRIMES_PERCENT,
    PATTERN_DISTRIBUTION,
    RISK_WEIGHTS,
    CRIME_TIME_WINDOWS
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Lifecycle manager –¥–ª—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Crime Prevention System API...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        assert TOTAL_VIOLATIONS_ANALYZED == 146570, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π"
        assert TOTAL_RECIDIVISTS == 12333, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–∏–¥–∏–≤–∏—Å—Ç–æ–≤"
        assert PREVENTABLE_CRIMES_PERCENT == 97.0, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–º—ã—Ö –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å–∞ (–¥–æ–ª–∂–Ω—ã –≤ —Å—É–º–º–µ –¥–∞–≤–∞—Ç—å 1.0)
        weights_sum = sum(RISK_WEIGHTS.values())
        assert abs(weights_sum - 1.0) < 0.001, f"–°—É–º–º–∞ –≤–µ—Å–æ–≤ –Ω–µ —Ä–∞–≤–Ω–∞ 1.0: {weights_sum}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
        assert len(CRIME_TIME_WINDOWS) == 8, f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω: {len(CRIME_TIME_WINDOWS)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        assert len(PATTERN_DISTRIBUTION) >= 5, "–ù–µ –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        
        logger.info("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {TOTAL_VIOLATIONS_ANALYZED:,}")
        logger.info(f"üë• –†–µ—Ü–∏–¥–∏–≤–∏—Å—Ç–æ–≤ –≤ –≤—ã–±–æ—Ä–∫–µ: {TOTAL_RECIDIVISTS:,}")
        logger.info(f"üéØ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–º—ã—Ö –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π: {PREVENTABLE_CRIMES_PERCENT}%")
        
        yield
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        logger.error(traceback.format_exc())
        raise
    
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Crime Prevention System API")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Crime Prevention System API",
    description=f"""
    ## üöî –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π

    REST API –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤ —Ä–µ—Ü–∏–¥–∏–≤–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π.
    
    **–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –Ω–∞—É—á–Ω–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏:**
    - üìä {TOTAL_VIOLATIONS_ANALYZED:,} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–π
    - üë• {TOTAL_RECIDIVISTS:,} —Ä–µ—Ü–∏–¥–∏–≤–∏—Å—Ç–æ–≤ –≤ –≤—ã–±–æ—Ä–∫–µ  
    - üéØ {PREVENTABLE_CRIMES_PERCENT}% –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–º—ã—Ö –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π
    
    **–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    - üî¢ –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫-–±–∞–ª–ª–æ–≤ (0-10) —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
    - üìÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω –¥–æ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π
    - üìà –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –∏ –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    - üìã –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    - üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    
    **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:**
    - –ü–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    - –ò–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Pydantic
    - –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞—É–¥–∏—Ç —Ä–∞—Å—á–µ—Ç–æ–≤
    """,
    version="2.0.0",
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",    # React development
        "http://localhost:5173",    # Vite development  
        "http://localhost:8080",    # Alternative frontend
        "https://localhost:3000",   # HTTPS variants
        "https://localhost:5173",
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = datetime.utcnow()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    logger.info(f"üìù {request.method} {request.url.path} –æ—Ç {request.client.host}")
    
    try:
        response = await call_next(request)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        logger.info(f"‚úÖ {request.method} {request.url.path} -> {response.status_code} [{process_time:.1f}ms]")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        response.headers["X-Process-Time"] = f"{process_time:.1f}ms"
        
        return response
        
    except Exception as e:
        process_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        logger.error(f"üí• {request.method} {request.url.path} -> ERROR [{process_time:.1f}ms]: {e}")
        raise


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ (–ø—Ä–µ—Ñ–∏–∫—Å—ã —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ —Å–∞–º–∏—Ö —Ä–æ—É—Ç–µ—Ä–∞—Ö)
app.include_router(risks.router)
app.include_router(forecasts.router)
app.include_router(statistics.router)
app.include_router(persons.router)
app.include_router(interventions.router)
app.include_router(data_import.router)


# –ë–∞–∑–æ–≤—ã–µ endpoints
@app.get(
    "/",
    summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API",
    description="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π"
)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± API"""
    return {
        "name": "Crime Prevention System API",
        "version": "2.0.0",
        "description": "API –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤ —Ä–µ—Ü–∏–¥–∏–≤–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π",
        "research_base": {
            "total_analyzed": TOTAL_VIOLATIONS_ANALYZED,
            "total_recidivists": TOTAL_RECIDIVISTS,
            "preventable_percent": PREVENTABLE_CRIMES_PERCENT
        },
        "endpoints": {
            "risks": "/api/risks",
            "forecasts": "/api/forecasts",
            "docs": "/docs",
            "redoc": "/redoc"
        },
        "status": "operational",
        "timestamp": datetime.utcnow().isoformat()
    }


@app.get(
    "/health",
    summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
    description="–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"
)
async def health_check():
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
    
    Returns:
        Dict: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    try:
        from app.services.risk_service import RiskService
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤
        service = RiskService()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        test_data = {
            'pattern_type': 'mixed_unstable',
            'total_cases': 3,
            'current_age': 25,
            'criminal_count': 1,
            'admin_count': 2,
            'days_since_last': 60
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        is_valid, errors = service.validate_person_data(test_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞
        if is_valid:
            result = service.calculate_risk_for_person_dict(test_data)
            risk_calculation_works = 0 <= result['risk_score'] <= 10
        else:
            risk_calculation_works = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        forecasts = service.forecaster.forecast_crime_timeline(test_data)
        forecasting_works = len(forecasts) == len(CRIME_TIME_WINDOWS)
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        all_healthy = (
            is_valid and 
            risk_calculation_works and 
            forecasting_works and
            len(RISK_WEIGHTS) == 6 and
            len(CRIME_TIME_WINDOWS) == 8
        )
        
        return {
            "status": "healthy" if all_healthy else "degraded",
            "timestamp": datetime.utcnow().isoformat(),
            "components": {
                "constants_loaded": {
                    "status": "operational",
                    "total_analyzed": TOTAL_VIOLATIONS_ANALYZED,
                    "total_recidivists": TOTAL_RECIDIVISTS,
                    "weights_loaded": len(RISK_WEIGHTS),
                    "time_windows_loaded": len(CRIME_TIME_WINDOWS)
                },
                "risk_calculation": {
                    "status": "operational" if risk_calculation_works else "error",
                    "validation_working": is_valid,
                    "test_calculation": result['risk_score'] if risk_calculation_works else None
                },
                "crime_forecasting": {
                    "status": "operational" if forecasting_works else "error", 
                    "forecasts_generated": len(forecasts),
                    "expected_forecasts": len(CRIME_TIME_WINDOWS)
                },
                "api_endpoints": {
                    "risks_router": "mounted",
                    "forecasts_router": "mounted"
                }
            },
            "performance": {
                "test_calculation_completed": risk_calculation_works,
                "test_forecasting_completed": forecasting_works
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        logger.error(traceback.format_exc())
        
        return {
            "status": "unhealthy",
            "timestamp": datetime.utcnow().isoformat(),
            "error": str(e),
            "components": {
                "constants_loaded": len(RISK_WEIGHTS) == 6 and len(CRIME_TIME_WINDOWS) == 8,
                "risk_calculation": "error",
                "crime_forecasting": "error",
                "api_endpoints": "unknown"
            }
        }


@app.get(
    "/version",
    summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏",
    description="–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ API –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö"
)
async def get_version():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ API –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö"""
    return {
        "api_version": "2.0.0",
        "python_version": "3.8+",
        "fastapi_version": "FastAPI",
        "research_version": "2024",
        "data_sources": {
            "violations_analyzed": TOTAL_VIOLATIONS_ANALYZED,
            "recidivists_analyzed": TOTAL_RECIDIVISTS,
            "analysis_period": "2019-2024",
            "coverage": "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞"
        },
        "algorithm_versions": {
            "risk_calculator": "2.0",
            "crime_forecaster": "2.0", 
            "constants": "2024.01"
        },
        "build_info": {
            "built_at": datetime.utcnow().isoformat(),
            "environment": "production"
        }
    }


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {request.method} {request.url.path}: {exc}")
    logger.error(traceback.format_exc())
    
    return JSONResponse(
        status_code=500,
        content={
            "detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "path": str(request.url.path),
            "method": request.method,
            "timestamp": datetime.utcnow().isoformat()
        }
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404
@app.exception_handler(404)
async def not_found_handler(request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö endpoints"""
    return JSONResponse(
        status_code=404,
        content={
            "detail": f"Endpoint {request.url.path} –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "available_endpoints": {
                "risks": "/api/risks",
                "forecasts": "/api/forecasts",
                "docs": "/docs",
                "health": "/health"
            },
            "timestamp": datetime.utcnow().isoformat()
        }
    )


if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Crime Prevention System API –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏")
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )