#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò–ù –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–î–æ–±–∞–≤–ª—è–µ—Ç –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏ –∫ –∫–æ—Ä–æ—Ç–∫–∏–º –ò–ò–ù –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤
"""
import sqlite3
import sys
from pathlib import Path

def fix_short_iin():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –ò–ò–ù, –¥–æ–±–∞–≤–ª—è—è –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏"""
    
    db_path = "crime_prevention.db"
    if not Path(db_path).exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ò–ò–ù
        cursor.execute("SELECT id, iin, full_name FROM persons_real WHERE length(iin) < 12")
        short_iin_records = cursor.fetchall()
        
        if not short_iin_records:
            print("‚úÖ –í—Å–µ –ò–ò–ù —É–∂–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–ª–∏–Ω—É")
            return True
            
        print(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(short_iin_records)} –∑–∞–ø–∏—Å–µ–π —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ò–ò–ù")
        
        # –°–æ–∑–¥–∞–µ–º backup —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS persons_real_backup AS 
            SELECT * FROM persons_real WHERE 1=0
        """)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ backup
        cursor.execute("DELETE FROM persons_real_backup")
        cursor.execute("INSERT INTO persons_real_backup SELECT * FROM persons_real")
        
        fixed_count = 0
        failed_count = 0
        
        for record_id, old_iin, full_name in short_iin_records:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –Ω—É–ª–µ–π –¥–æ–±–∞–≤–∏—Ç—å
                current_length = len(old_iin)
                
                if current_length < 12:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
                    new_iin = old_iin.zfill(12)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –ò–ò–ù —É–Ω–∏–∫–∞–ª–µ–Ω
                    cursor.execute("SELECT COUNT(*) FROM persons_real WHERE iin = ? AND id != ?", (new_iin, record_id))
                    count = cursor.fetchone()[0]
                    
                    if count == 0:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                        cursor.execute("UPDATE persons_real SET iin = ? WHERE id = ?", (new_iin, record_id))
                        print(f"‚úÖ {full_name}: {old_iin} ‚Üí {new_iin}")
                        fixed_count += 1
                    else:
                        print(f"‚ö†Ô∏è  {full_name}: {old_iin} ‚Üí {new_iin} (–∫–æ–Ω—Ñ–ª–∏–∫—Ç - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                        failed_count += 1
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {full_name} ({old_iin}): {e}")
                failed_count += 1
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count}")
        print(f"   –û—à–∏–±–æ–∫: {failed_count}")
        print(f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(short_iin_records)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        cursor.execute("SELECT COUNT(*) FROM persons_real WHERE length(iin) < 12")
        remaining_short = cursor.fetchone()[0]
        
        if remaining_short == 0:
            print("‚úÖ –í—Å–µ –ò–ò–ù —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–ª–∏–Ω—É!")
        else:
            print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {remaining_short} –∑–∞–ø–∏—Å–µ–π —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ò–ò–ù")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.rollback()
        return False
        
    finally:
        conn.close()

def verify_iin_fix():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò–ù"""
    
    conn = sqlite3.connect("crime_prevention.db")
    cursor = conn.cursor()
    
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–ª–∏–Ω–µ –ò–ò–ù
        cursor.execute("""
            SELECT length(iin) as iin_length, COUNT(*) as count
            FROM persons_real 
            GROUP BY length(iin) 
            ORDER BY iin_length
        """)
        
        stats = cursor.fetchall()
        
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª–∏–Ω—ã –ò–ò–ù –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        total = 0
        for length, count in stats:
            print(f"   {length} —Å–∏–º–≤–æ–ª–æ–≤: {count} –∑–∞–ø–∏—Å–µ–π")
            total += count
            
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ò–ò–ù
        cursor.execute("""
            SELECT iin, full_name 
            FROM persons_real 
            WHERE iin LIKE '0%' 
            LIMIT 5
        """)
        
        examples = cursor.fetchall()
        if examples:
            print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ò–ò–ù (–Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å 0):")
            for iin, name in examples:
                print(f"   {iin} - {name}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False
        
    finally:
        conn.close()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò–ù –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    if fix_short_iin():
        verify_iin_fix()
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        sys.exit(1)