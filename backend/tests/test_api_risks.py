"""
–¢–µ—Å—Ç—ã –¥–ª—è API endpoints —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤

–ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á—Ç–æ –∏ utils/risk_calculator.py
"""

import sys
import os
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

# –ü—Ä–æ—Å—Ç–æ–π HTTP –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
import json
import urllib.request
import urllib.parse
import time


class SimpleTestClient:
    """–ü—Ä–æ—Å—Ç–æ–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    def __init__(self, base_url: str = "http://127.0.0.1:8001"):
        self.base_url = base_url.rstrip('/')
    
    def _make_request(self, method: str, path: str, data: Dict = None) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å"""
        url = f"{self.base_url}{path}"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if data:
            json_data = json.dumps(data).encode('utf-8')
            headers = {'Content-Type': 'application/json'}
        else:
            json_data = None
            headers = {}
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        req = urllib.request.Request(url, data=json_data, headers=headers, method=method)
        
        try:
            with urllib.request.urlopen(req) as response:
                response_data = response.read().decode('utf-8')
                return {
                    'status_code': response.status,
                    'json': json.loads(response_data) if response_data else {}
                }
        except urllib.error.HTTPError as e:
            error_data = e.read().decode('utf-8')
            try:
                error_json = json.loads(error_data)
            except:
                error_json = {'detail': error_data}
            
            return {
                'status_code': e.code,
                'json': error_json
            }
        except Exception as e:
            return {
                'status_code': 0,
                'json': {'error': str(e)}
            }
    
    def get(self, path: str) -> Dict:
        """GET –∑–∞–ø—Ä–æ—Å"""
        return self._make_request('GET', path)
    
    def post(self, path: str, json_data: Dict) -> Dict:
        """POST –∑–∞–ø—Ä–æ—Å"""
        return self._make_request('POST', path, json_data)


def test_server_health():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    
    client = SimpleTestClient()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π health endpoint
    response = client.get("/health")
    
    if response['status_code'] != 200:
        print(f"   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response['status_code']}")
        return False
    
    data = response['json']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    components = data.get('components', {})
    
    expected_components = ['constants_loaded', 'risk_calculation', 'crime_forecasting']
    for component in expected_components:
        if component not in components:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {component}")
            return False
    
    print(f"   ‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—Ç–∞—Ç—É—Å: {data.get('status')}")
    return True


def test_calculate_risk_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞"""
    print("üß™ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞")
    
    client = SimpleTestClient()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - —Ç–æ—Ç –∂–µ —Å–ª—É—á–∞–π —á—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
    test_data = {
        "iin": "123456789012",
        "pattern_type": "mixed_unstable",
        "total_cases": 5,
        "criminal_count": 2,
        "admin_count": 3,
        "days_since_last": 60,
        "current_age": 28,
        "age_at_first_violation": 21,
        "has_property": 0,
        "has_job": 1,
        "has_family": 0,
        "substance_abuse": 0,
        "has_escalation": 0,
        "admin_to_criminal": 1,
        "recidivism_rate": 1.5
    }
    
    response = client.post("/api/risks/calculate", test_data)
    
    if response['status_code'] != 200:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response['status_code']} - {response['json']}")
        return False
    
    data = response['json']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    required_fields = ['risk_score', 'risk_level', 'components', 'recommendation']
    for field in required_fields:
        if field not in data:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
            return False
    
    risk_score = data['risk_score']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∏—Å–∫-–±–∞–ª–ª–∞
    if not (0 <= risk_score <= 10):
        print(f"   ‚ùå –†–∏—Å–∫-–±–∞–ª–ª –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [0,10]: {risk_score}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á—Ç–æ –º—ã –æ–∂–∏–¥–∞–ª–∏ (5.760)
    expected_risk = 5.760
    if abs(risk_score - expected_risk) > 0.01:
        print(f"   ‚ö†Ô∏è –†–∏—Å–∫-–±–∞–ª–ª –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ: {risk_score} vs {expected_risk}")
        # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, —Ç–∞–∫ –∫–∞–∫ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    components = data['components']
    expected_components = ['pattern', 'history', 'time', 'age', 'social', 'escalation']
    for comp in expected_components:
        if comp not in components:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {comp}")
            return False
    
    print(f"   ‚úÖ –†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–µ–Ω: {risk_score:.3f} ({data['risk_level']})")
    print(f"        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {data['recommendation']}")
    
    return True


def test_calculate_risk_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    client = SimpleTestClient()
    
    # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    invalid_data = {
        "pattern_type": "invalid_pattern",
        "total_cases": -1,
        "current_age": 200
    }
    
    response = client.post("/api/risks/calculate", invalid_data)
    
    # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if response['status_code'] not in [422, 400]:
        print(f"   ‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω –∫–æ–¥: {response['status_code']}")
        return False
    
    print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∫–æ–¥ {response['status_code']})")
    return True


def test_quick_assessment():
    """–¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏"""
    print("üß™ –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏")
    
    client = SimpleTestClient()
    
    test_data = {
        "pattern_type": "escalating",
        "total_cases": 8,
        "criminal_count": 3,
        "current_age": 23,
        "days_since_last": 30
    }
    
    response = client.post("/api/risks/quick-assessment", test_data)
    
    if response['status_code'] != 200:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏: {response['status_code']} - {response['json']}")
        return False
    
    data = response['json']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    required_fields = ['risk_score', 'risk_level', 'components', 'most_likely_crime']
    for field in required_fields:
        if field not in data:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
            return False
    
    print(f"   ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞: {data['risk_score']:.3f} ({data['risk_level']})")
    
    if data['most_likely_crime']:
        mlc = data['most_likely_crime']
        print(f"        –í–µ—Ä–æ—è—Ç–Ω–æ–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {mlc['crime_type']} —á–µ—Ä–µ–∑ {mlc['days']} –¥–Ω–µ–π")
    
    return True


def test_risk_statistics():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("üß™ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∏—Å–∫–æ–≤")
    
    client = SimpleTestClient()
    
    response = client.get("/api/risks/statistics")
    
    if response['status_code'] != 200:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response['status_code']}")
        return False
    
    data = response['json']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    expected_stats = ['total_analyzed', 'total_recidivists', 'preventable_crimes_percent']
    for stat in expected_stats:
        if stat not in data:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stat}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
    if data['total_analyzed'] != 146570:
        print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {data['total_analyzed']}")
        return False
    
    if data['total_recidivists'] != 12333:
        print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–∏–¥–∏–≤–∏—Å—Ç–æ–≤: {data['total_recidivists']}")
        return False
    
    print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {data['total_analyzed']:,} –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    return True


def test_forecast_timeline():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω"""
    print("üß™ –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω")
    
    client = SimpleTestClient()
    
    test_data = {
        "pattern_type": "mixed_unstable",
        "total_cases": 3,
        "current_age": 25,
        "has_property": 0,
        "has_job": 1,
        "substance_abuse": 0
    }
    
    response = client.post("/api/forecasts/timeline", test_data)
    
    if response['status_code'] != 200:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {response['status_code']} - {response['json']}")
        return False
    
    data = response['json']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if 'forecasts' not in data:
        print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ forecasts")
        return False
    
    forecasts = data['forecasts']
    
    if len(forecasts) == 0:
        print(f"   ‚ùå –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
    first_forecast = forecasts[0]
    required_fields = ['crime_type', 'days', 'probability', 'confidence']
    for field in required_fields:
        if field not in first_forecast:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ: {field}")
            return False
    
    print(f"   ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(forecasts)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    print(f"        –ë–ª–∏–∂–∞–π—à–∏–π —Ä–∏—Å–∫: {first_forecast['crime_type']} —á–µ—Ä–µ–∑ {first_forecast['days']} –¥–Ω–µ–π ({first_forecast['probability']:.1f}%)")
    
    return True


def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API"""
    print("üß™ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    client = SimpleTestClient()
    
    test_data = {
        "pattern_type": "mixed_unstable", 
        "total_cases": 5,
        "criminal_count": 2,
        "current_age": 28,
        "days_since_last": 60
    }
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è 10 –∑–∞–ø—Ä–æ—Å–æ–≤
    times = []
    successful = 0
    
    for i in range(10):
        start_time = time.time()
        response = client.post("/api/risks/calculate", test_data)
        end_time = time.time()
        
        request_time = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        times.append(request_time)
        
        if response['status_code'] == 200:
            successful += 1
    
    avg_time = sum(times) / len(times)
    min_time = min(times)
    max_time = max(times)
    
    print(f"   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {successful}/10 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"        –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}ms")
    print(f"        –ú–∏–Ω/–ú–∞–∫—Å: {min_time:.1f}ms / {max_time:.1f}ms")
    
    # –°—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º –µ—Å–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è < 1000ms –∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω—ã
    return avg_time < 1000 and successful == 10


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã API"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS")
    print("=" * 80)
    
    tests = [
        ("–†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞", test_server_health),
        ("–ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞", test_calculate_risk_basic),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", test_calculate_risk_validation),
        ("–ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞", test_quick_assessment), 
        ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏—Å–∫–æ–≤", test_risk_statistics),
        ("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", test_forecast_timeline),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", test_performance)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}")
        
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
                print(f"   üí• –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            failed += 1
            print(f"   üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    print("\n" + "=" * 80)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API")
    print("=" * 80)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {failed}")
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(tests)}")
    
    if failed == 0:
        print("\nüéâ –í–°–ï API –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("   API –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º")
        print("   –†–∞—Å—á–µ—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç Streamlit –≤–µ—Ä—Å–∏–∏")
        return 0
    else:
        print(f"\nüí• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í API!")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        return 1


def check_api_vs_streamlit():
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ API —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º Streamlit
    """
    print("\nüîç –°–†–ê–í–ù–ï–ù–ò–ï API –° STREAMLIT –í–ï–†–°–ò–ï–ô")
    print("=" * 60)
    
    client = SimpleTestClient()
    
    # –¢–æ—Ç –∂–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
    test_case = {
        "pattern_type": "mixed_unstable",
        "total_cases": 5,
        "criminal_count": 2,
        "admin_count": 3,
        "days_since_last": 60,
        "current_age": 28,
        "age_at_first_violation": 21,
        "has_property": 0,
        "has_job": 1,
        "has_family": 0,
        "substance_abuse": 0,
        "has_escalation": 0,
        "admin_to_criminal": 1,
        "recidivism_rate": 1.5
    }
    
    response = client.post("/api/risks/calculate", test_case)
    
    if response['status_code'] != 200:
        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {response['status_code']}")
        return False
    
    api_risk_score = response['json']['risk_score']
    expected_risk_score = 5.760  # –ò–∑ –Ω–∞—à–∏—Ö —Ç–µ—Å—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    
    difference = abs(api_risk_score - expected_risk_score)
    
    print(f"API —Ä–∏—Å–∫-–±–∞–ª–ª:      {api_risk_score:.3f}")
    print(f"Streamlit –æ–∂–∏–¥–∞–µ–º—ã–π: {expected_risk_score:.3f}")
    print(f"–†–∞–∑–ª–∏—á–∏–µ:           {difference:.6f}")
    
    if difference < 0.001:
        print("üéâ –ü–û–õ–ù–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï!")
        print("   API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        return True
    elif difference < 0.01:
        print("‚ö†Ô∏è –ù–µ–±–æ–ª—å—à–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ)")
        return True
    else:
        print("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –†–ê–ó–õ–ò–ß–ò–ï!")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False


if __name__ == "__main__":
    print("‚ö° –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API")
    print("–í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    client = SimpleTestClient()
    try:
        health_response = client.get("/health")
        if health_response['status_code'] != 200:
            print("üí• –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ:")
            print("   cd backend && python3 -m uvicorn app.main:app --reload --port 8000")
            exit(1)
    except:
        print("üí• –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   cd backend && python3 -m uvicorn app.main:app --reload --port 8000")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    exit_code = run_all_tests()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å Streamlit
    if exit_code == 0:
        if check_api_vs_streamlit():
            print("\nüöÄ API –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–û –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        else:
            print("\n‚ö†Ô∏è API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º")
            exit_code = 1
    
    exit(exit_code)