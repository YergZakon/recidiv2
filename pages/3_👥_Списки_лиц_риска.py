"""
üë• –°–ø–∏—Å–∫–∏ –ª–∏—Ü –ø–æ–¥ —Ä–∏—Å–∫–æ–º
–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ª–∏—Ü —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —Ä–∏—Å–∫–∞ —Ä–µ—Ü–∏–¥–∏–≤–∞
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import os
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–ø–∏—Å–∫–∏ –ª–∏—Ü –ø–æ–¥ —Ä–∏—Å–∫–æ–º",
    page_icon="üë•",
    layout="wide"
)

st.title("üë• –°–ø–∏—Å–∫–∏ –ª–∏—Ü –ø–æ–¥ —Ä–∏—Å–∫–æ–º")
st.markdown("### –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ª–∏—Ü —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —Ä–∏—Å–∫–∞ —Ä–µ—Ü–∏–¥–∏–≤–∞")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏—Ü–∞—Ö –ø–æ–¥ —Ä–∏—Å–∫–æ–º
@st.cache_data
def load_risk_persons_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–∏—Ü–∞—Ö –ø–æ–¥ —Ä–∏—Å–∫–æ–º"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤
    risk_file = "data/RISK_ANALYSIS_RESULTS.xlsx"
    
    if os.path.exists(risk_file):
        try:
            df = pd.read_excel(risk_file)
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ RISK_ANALYSIS_RESULTS.xlsx")
            return df
        except Exception as e:
            st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)
    n_people = 12333  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–∏–¥–∏–≤–∏—Å—Ç–æ–≤ –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    demo_data = {
        '–ò–ò–ù': [f"***-***-{str(i).zfill(4)}" for i in range(1, n_people + 1)],
        '–§–∞–º–∏–ª–∏—è': [f"–§–ê–ú–ò–õ–ò–Ø_{i:05d}" for i in range(1, n_people + 1)],
        '–ò–º—è': [f"–ò–ú–Ø_{i:03d}" for i in range(1, n_people + 1)],
        '–û—Ç—á–µ—Å—Ç–≤–æ': [f"–û–¢–ß–ï–°–¢–í–û_{i:03d}" for i in range(1, n_people + 1)],
        'current_age': np.random.normal(35, 12, n_people).clip(18, 70).astype(int),
        'gender': np.random.choice(['–ú', '–ñ'], n_people, p=[0.85, 0.15]),
        'pattern_type': np.random.choice([
            'mixed_unstable', 'chronic_criminal', 'escalating', 'deescalating', 'single'
        ], n_people, p=[0.727, 0.136, 0.07, 0.057, 0.01]),
        'total_cases': np.random.poisson(4, n_people) + 1,
        'criminal_count': np.random.poisson(1.5, n_people),
        'admin_count': np.random.poisson(2.5, n_people),
        'risk_total_risk_score': np.random.beta(2, 5, n_people) * 10,
        'last_violation_date': [
            datetime.now() - timedelta(days=np.random.randint(1, 730))
            for _ in range(n_people)
        ],
        'last_violation_type': np.random.choice([
            '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–ö—Ä–∞–∂–∞', '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ', 
            '–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ', '–ì—Ä–∞–±–µ–∂', '–ü–æ–±–æ–∏'
        ], n_people, p=[0.4, 0.25, 0.15, 0.1, 0.05, 0.05])
    }
    
    df = pd.DataFrame(demo_data)
    st.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    return df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∏—Å–∫–∞
def get_risk_category(risk_score):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∏—Å–∫–∞ –ø–æ –±–∞–ª–ª—É"""
    if risk_score >= 7:
        return "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
    elif risk_score >= 5:
        return "üü° –í—ã—Å–æ–∫–∏–π" 
    elif risk_score >= 3:
        return "üü† –°—Ä–µ–¥–Ω–∏–π"
    else:
        return "üü¢ –ù–∏–∑–∫–∏–π"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è
def get_control_status(risk_score, days_since_last):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–æ–ª—è"""
    if risk_score >= 7:
        return "üö® –¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
    elif risk_score >= 5:
        return "‚ö†Ô∏è –£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å"
    elif days_since_last < 90:
        return "üëÅÔ∏è –ù–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ"
    else:
        return "üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
risk_df = load_risk_persons_data()

if risk_df is not None and len(risk_df) > 0:
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∏—Å–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å—ã
    if 'risk_total_risk_score' in risk_df.columns:
        risk_df['risk_category'] = risk_df['risk_total_risk_score'].apply(get_risk_category)
    else:
        risk_df['risk_category'] = np.random.choice([
            "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", "üü° –í—ã—Å–æ–∫–∏–π", "üü† –°—Ä–µ–¥–Ω–∏–π", "üü¢ –ù–∏–∑–∫–∏–π"
        ], len(risk_df), p=[0.15, 0.25, 0.35, 0.25])
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –§–ò–û –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if all(col in risk_df.columns for col in ['–§–∞–º–∏–ª–∏—è', '–ò–º—è', '–û—Ç—á–µ—Å—Ç–≤–æ']):
        risk_df['–§–ò–û_full'] = risk_df['–§–∞–º–∏–ª–∏—è'].astype(str) + ' ' + risk_df['–ò–º—è'].astype(str) + ' ' + risk_df['–û—Ç—á–µ—Å—Ç–≤–æ'].astype(str)
        risk_df['–§–ò–û_full'] = risk_df['–§–ò–û_full'].str.replace(' nan', '').str.replace('nan ', '').str.strip()
    elif '–§–ò–û' not in risk_df.columns:
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π, –Ω–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –§–ò–û
        risk_df['–§–ò–û_full'] = risk_df['–ò–ò–ù'].astype(str)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò–ù –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
    else:
        risk_df['–§–ò–û_full'] = risk_df['–§–ò–û']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    if 'last_violation_date' in risk_df.columns:
        risk_df['days_since_last'] = (datetime.now() - risk_df['last_violation_date']).dt.days
        risk_df['control_status'] = risk_df.apply(
            lambda x: get_control_status(x.get('risk_total_risk_score', 0), x['days_since_last']), 
            axis=1
        )
    else:
        risk_df['days_since_last'] = np.random.randint(1, 730, len(risk_df))
        risk_df['control_status'] = "üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å"
    
    # –§–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.sidebar.header("üéõÔ∏è –§–∏–ª—å—Ç—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∏—Å–∫–∞
    selected_categories = st.sidebar.multiselect(
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∏—Å–∫–∞:",
        options=risk_df['risk_category'].unique(),
        default=risk_df['risk_category'].unique()
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    age_range = st.sidebar.slider(
        "–í–æ–∑—Ä–∞—Å—Ç:",
        min_value=int(risk_df['current_age'].min()) if 'current_age' in risk_df.columns else 18,
        max_value=int(risk_df['current_age'].max()) if 'current_age' in risk_df.columns else 70,
        value=(25, 45)
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–µ–ª
    if 'total_cases' in risk_df.columns:
        min_cases = st.sidebar.number_input(
            "–ú–∏–Ω–∏–º—É–º –¥–µ–ª:",
            min_value=1,
            max_value=int(risk_df['total_cases'].max()),
            value=1
        )
    else:
        min_cases = 1
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—è–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    max_days_since = st.sidebar.slider(
        "–ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è:",
        min_value=1,
        max_value=730,
        value=365
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_df = risk_df[
        (risk_df['risk_category'].isin(selected_categories)) &
        (risk_df['current_age'] >= age_range[0]) &
        (risk_df['current_age'] <= age_range[1]) &
        (risk_df['total_cases'] >= min_cases) &
        (risk_df['days_since_last'] <= max_days_since)
    ]
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –ª–∏—Ü", f"{len(filtered_df):,}")
    
    with col2:
        critical_count = len(filtered_df[filtered_df['risk_category'] == "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"])
        st.metric("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫", f"{critical_count:,}")
    
    with col3:
        if 'total_cases' in filtered_df.columns:
            avg_cases = filtered_df['total_cases'].mean()
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –¥–µ–ª", f"{avg_cases:.1f}")
    
    with col4:
        if 'risk_total_risk_score' in filtered_df.columns:
            avg_risk = filtered_df['risk_total_risk_score'].mean()
            st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫-–±–∞–ª–ª", f"{avg_risk:.2f}")
    
    # –°–ø–∏—Å–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∏—Å–∫–∞
    st.subheader("üë• –°–ø–∏—Å–∫–∏ –ª–∏—Ü –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∏—Å–∫–∞")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    tab1, tab2, tab3, tab4 = st.tabs([
        "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", "üü° –í—ã—Å–æ–∫–∏–π", "üü† –°—Ä–µ–¥–Ω–∏–π", "üü¢ –ù–∏–∑–∫–∏–π"
    ])
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    def display_category_list(category, tab):
        with tab:
            category_df = filtered_df[filtered_df['risk_category'] == category].copy()
            
            if len(category_df) > 0:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∏—Å–∫-–±–∞–ª–ª—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
                if 'risk_total_risk_score' in category_df.columns:
                    category_df = category_df.sort_values('risk_total_risk_score', ascending=False)
                
                st.markdown(f"**–ù–∞–π–¥–µ–Ω–æ: {len(category_df)} —á–µ–ª–æ–≤–µ–∫**")
                
                # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_count = st.selectbox(
                    f"–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–µ–π ({category}):",
                    options=[10, 25, 50, 100, "–í—Å–µ"],
                    key=f"display_count_{category}"
                )
                
                if display_count != "–í—Å–µ":
                    display_df = category_df.head(display_count)
                else:
                    display_df = category_df
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_columns = ['–ò–ò–ù']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –§–ò–û –µ—Å–ª–∏ –µ—Å—Ç—å
                if '–§–ò–û_full' in display_df.columns:
                    display_columns.append('–§–ò–û_full')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                display_columns.extend(['current_age', 'gender'])
                
                if 'risk_total_risk_score' in display_df.columns:
                    display_columns.append('risk_total_risk_score')
                if 'total_cases' in display_df.columns:
                    display_columns.append('total_cases')
                if 'criminal_count' in display_df.columns:
                    display_columns.append('criminal_count')
                if 'last_violation_type' in display_df.columns:
                    display_columns.append('last_violation_type')
                if 'days_since_last' in display_df.columns:
                    display_columns.append('days_since_last')
                if 'control_status' in display_df.columns:
                    display_columns.append('control_status')
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                available_columns = [col for col in display_columns if col in display_df.columns]
                table_df = display_df[available_columns].copy()
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                column_rename = {
                    '–ò–ò–ù': '–ò–ò–ù',
                    '–§–ò–û_full': '–§–ò–û',
                    'current_age': '–í–æ–∑—Ä–∞—Å—Ç',
                    'gender': '–ü–æ–ª',
                    'risk_total_risk_score': '–†–∏—Å–∫-–±–∞–ª–ª',
                    'total_cases': '–í—Å–µ–≥–æ –¥–µ–ª',
                    'criminal_count': '–£–≥–æ–ª–æ–≤–Ω—ã—Ö',
                    'last_violation_type': '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ',
                    'days_since_last': '–î–Ω–µ–π –Ω–∞–∑–∞–¥',
                    'control_status': '–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–æ–ª—è'
                }
                
                table_df = table_df.rename(columns=column_rename)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                if '–†–∏—Å–∫-–±–∞–ª–ª' in table_df.columns:
                    table_df['–†–∏—Å–∫-–±–∞–ª–ª'] = table_df['–†–∏—Å–∫-–±–∞–ª–ª'].round(2)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                def style_category_table(df, category):
                    def highlight_rows(row):
                        if category == "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π":
                            return ['background-color: #ffe6e6'] * len(row)
                        elif category == "üü° –í—ã—Å–æ–∫–∏–π":
                            return ['background-color: #fff8e1'] * len(row)
                        elif category == "üü† –°—Ä–µ–¥–Ω–∏–π":
                            return ['background-color: #f3e5f5'] * len(row)
                        else:
                            return ['background-color: #e8f5e8'] * len(row)
                    
                    styled = df.style.apply(highlight_rows, axis=1)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                    format_dict = {}
                    if '–†–∏—Å–∫-–±–∞–ª–ª' in df.columns:
                        format_dict['–†–∏—Å–∫-–±–∞–ª–ª'] = '{:.2f}'
                    
                    if format_dict:
                        styled = styled.format(format_dict)
                    
                    return styled
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                st.dataframe(
                    style_category_table(table_df, category),
                    use_container_width=True,
                    hide_index=True,
                    height=400
                )
                
                # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                csv = table_df.to_csv(index=False).encode('utf-8')
                category_name = category.replace("üî¥ ", "").replace("üü° ", "").replace("üü† ", "").replace("üü¢ ", "")
                st.download_button(
                    label=f"üì• –°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ ({category})",
                    data=csv,
                    file_name=f'risk_list_{category_name}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv',
                    mime='text/csv',
                    key=f"download_{category}"
                )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if len(category_df) > 0:
                    st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**")
                    
                    stats_col1, stats_col2, stats_col3 = st.columns(3)
                    
                    with stats_col1:
                        if 'current_age' in category_df.columns:
                            avg_age = category_df['current_age'].mean()
                            st.write(f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: **{avg_age:.1f}** –ª–µ—Ç")
                    
                    with stats_col2:
                        if 'total_cases' in category_df.columns:
                            avg_cases = category_df['total_cases'].mean()
                            st.write(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –¥–µ–ª: **{avg_cases:.1f}**")
                    
                    with stats_col3:
                        if 'days_since_last' in category_df.columns:
                            avg_days = category_df['days_since_last'].mean()
                            st.write(f"–°—Ä–µ–¥–Ω–µ–µ –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ: **{avg_days:.0f}**")
            
            else:
                st.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    display_category_list("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", tab1)
    display_category_list("üü° –í—ã—Å–æ–∫–∏–π", tab2) 
    display_category_list("üü† –°—Ä–µ–¥–Ω–∏–π", tab3)
    display_category_list("üü¢ –ù–∏–∑–∫–∏–π", tab4)
    
    # –°–≤–æ–¥–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    st.markdown("---")
    st.subheader("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if len(filtered_df) > 0:
            export_df = filtered_df.copy()
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            column_rename = {
                '–ò–ò–ù': '–ò–ò–ù',
                '–§–ò–û_full': '–§–ò–û',
                'current_age': '–í–æ–∑—Ä–∞—Å—Ç',
                'gender': '–ü–æ–ª',
                'risk_category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è_—Ä–∏—Å–∫–∞',
                'risk_total_risk_score': '–†–∏—Å–∫_–±–∞–ª–ª',
                'total_cases': '–í—Å–µ–≥–æ_–¥–µ–ª',
                'criminal_count': '–£–≥–æ–ª–æ–≤–Ω—ã—Ö',
                'admin_count': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö',
                'last_violation_type': '–ü–æ—Å–ª–µ–¥–Ω–µ–µ_–Ω–∞—Ä—É—à–µ–Ω–∏–µ',
                'days_since_last': '–î–Ω–µ–π_—Å_–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ',
                'control_status': '–°—Ç–∞—Ç—É—Å_–∫–æ–Ω—Ç—Ä–æ–ª—è'
            }
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            rename_dict = {k: v for k, v in column_rename.items() if k in export_df.columns}
            export_df = export_df.rename(columns=rename_dict)
            
            csv_all = export_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üìä –°–∫–∞—á–∞—Ç—å –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                data=csv_all,
                file_name=f'all_risk_persons_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv',
                mime='text/csv'
            )
    
    with col2:
        # –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö
        critical_df = filtered_df[filtered_df['risk_category'] == "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"]
        if len(critical_df) > 0:
            csv_critical = critical_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üö® –°–∫–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö",
                data=csv_critical,
                file_name=f'critical_risk_persons_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv',
                mime='text/csv'
            )

else:
    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª–∏—Ü–∞—Ö –ø–æ–¥ —Ä–∏—Å–∫–æ–º")
    
    st.markdown("""
    ### üìÅ –¢—Ä–µ–±—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö:
    –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –≤ –ø–∞–ø–∫–µ `data/`:
    - `RISK_ANALYSIS_RESULTS.xlsx` (—Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤)
    
    ### üìä –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:
    –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏:
    - –ò–ò–ù
    - risk_total_risk_score (—Ä–∏—Å–∫-–±–∞–ª–ª –æ—Ç 0 –¥–æ 10)
    - current_age (—Ç–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç)
    - total_cases (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª)
    - criminal_count (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–æ–ª–æ–≤–Ω—ã—Ö –¥–µ–ª)
    - pattern_type (—Ç–∏–ø –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è)
    """)

# –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
with st.expander("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"):
    st.markdown("""
    **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞:**
    - –°–ø–∏—Å–∫–∏ –ª—é–¥–µ–π –ø–æ 4 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∏—Å–∫–∞
    - –î–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ª–∏—Ü–µ
    - –°—Ç–∞—Ç—É—Å—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    
    **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∏—Å–∫–∞:**
    - üî¥ **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π (7-10 –±–∞–ª–ª–æ–≤)**: –¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    - üü° **–í—ã—Å–æ–∫–∏–π (5-6 –±–∞–ª–ª–æ–≤)**: –¢—Ä–µ–±—É–µ—Ç —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
    - üü† **–°—Ä–µ–¥–Ω–∏–π (3-4 –±–∞–ª–ª–∞)**: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    - üü¢ **–ù–∏–∑–∫–∏–π (0-2 –±–∞–ª–ª–∞)**: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å
    
    **–°—Ç–∞—Ç—É—Å—ã –∫–æ–Ω—Ç—Ä–æ–ª—è:**
    - üö® **–¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞**: –†–∏—Å–∫ 7+ –±–∞–ª–ª–æ–≤
    - ‚ö†Ô∏è **–£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å**: –†–∏—Å–∫ 5-6 –±–∞–ª–ª–æ–≤
    - üëÅÔ∏è **–ù–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ**: –ù–µ–¥–∞–≤–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è (<90 –¥–Ω–µ–π)
    - üìã **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å**: –û–±—ã—á–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
    
    **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    - –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã
    - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∏—Å–∫-–±–∞–ª–ª—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    """)
