"""
üîç –ü–æ–∏—Å–∫ –ø–æ –ò–ò–ù
–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –∏ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ª–∏—Ü—É
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import os
import re
import sys
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from utils.data_loader import (
        load_all_data,
        get_risk_data,
        validate_iin,
        search_person_by_iin
    )
    from utils.risk_calculator import (
        RiskCalculator,
        CrimeForecaster,
        quick_risk_assessment
    )
    from utils.forecasting import (
        TimelineVisualizer,
        InterventionPlanner,
        generate_risk_report,
        format_risk_summary
    )
    MODULES_AVAILABLE = True
except ImportError:
    MODULES_AVAILABLE = False
    st.warning("‚ö†Ô∏è –ú–æ–¥—É–ª–∏ utils –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü–æ–∏—Å–∫ –ø–æ –ò–ò–ù",
    page_icon="üîç",
    layout="wide"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .person-card {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border-radius: 15px;
        padding: 2rem;
        margin: 1rem 0;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .risk-badge {
        display: inline-block;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: bold;
        margin: 0.5rem 0;
    }
    .risk-critical { background-color: #dc3545; color: white; }
    .risk-high { background-color: #ffc107; color: #000; }
    .risk-medium { background-color: #fd7e14; color: white; }
    .risk-low { background-color: #28a745; color: white; }
    .info-item {
        background-color: white;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 4px solid #007bff;
    }
    .recommendation-card {
        background-color: #e3f2fd;
        border: 1px solid #2196f3;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
    }
    .timeline-marker {
        position: relative;
        padding: 0.5rem;
        margin: 0.5rem 0;
        border-left: 3px solid #e74c3c;
        background-color: #fff5f5;
    }
</style>
""", unsafe_allow_html=True)

st.title("üîç –ü–æ–∏—Å–∫ –ø–æ –ò–ò–ù")
st.markdown("### –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –∏ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ª–∏—Ü—É")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def create_demo_data():
    """–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    np.random.seed(42)
    n_people = 100
    
    demo_data = {
        '–ò–ò–ù': [f"{np.random.randint(100000, 999999)}{np.random.randint(100000, 999999)}" for _ in range(n_people)],
        '–§–∞–º–∏–ª–∏—è': [f"–§–ê–ú–ò–õ–ò–Ø_{i:03d}" for i in range(1, n_people + 1)],
        '–ò–º—è': [f"–ò–ú–Ø_{i:03d}" for i in range(1, n_people + 1)], 
        '–û—Ç—á–µ—Å—Ç–≤–æ': [f"–û–¢–ß–ï–°–¢–í–û_{i:03d}" for i in range(1, n_people + 1)],
        'current_age': np.random.normal(35, 12, n_people).clip(18, 70).astype(int),
        'gender': np.random.choice(['–ú', '–ñ'], n_people, p=[0.85, 0.15]),
        'pattern_type': np.random.choice([
            'mixed_unstable', 'chronic_criminal', 'escalating', 'deescalating', 'single'
        ], n_people, p=[0.727, 0.136, 0.07, 0.057, 0.01]),
        'total_cases': np.random.poisson(4, n_people) + 1,
        'criminal_count': np.random.poisson(1.5, n_people),
        'admin_count': np.random.poisson(2.5, n_people),
        'risk_total_risk_score': np.random.beta(2, 5, n_people) * 10,
        'last_violation_date': [
            datetime.now() - timedelta(days=np.random.randint(1, 365))
            for _ in range(n_people)
        ],
        'last_violation_type': np.random.choice([
            '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–ö—Ä–∞–∂–∞', '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ', 
            '–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ', '–ì—Ä–∞–±–µ–∂', '–ü–æ–±–æ–∏'
        ], n_people, p=[0.4, 0.25, 0.15, 0.1, 0.05, 0.05]),
        'has_property': np.random.choice([0, 1], n_people, p=[0.6, 0.4]),
        'has_job': np.random.choice([0, 1], n_people, p=[0.4, 0.6]),
        'days_since_last': np.random.randint(1, 730, n_people),
        'age_at_first_violation': np.random.normal(25, 8, n_people).clip(14, 50).astype(int),
        'recidivism_rate': np.random.uniform(0.1, 3, n_people),
        'has_escalation': np.random.choice([0, 1], n_people, p=[0.8, 0.2]),
        'is_active': np.random.choice([0, 1], n_people, p=[0.6, 0.4])
    }
    
    return pd.DataFrame(demo_data)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –§–ò–û
def get_person_fio(person_dict):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –§–ò–û –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤–æ–µ –ø–æ–ª–µ –§–ò–û
    if '–§–ò–û' in person_dict and person_dict['–§–ò–û'] and str(person_dict['–§–ò–û']).strip() != 'nan':
        return str(person_dict['–§–ò–û']).strip()
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    parts = []
    if '–§–∞–º–∏–ª–∏—è' in person_dict and person_dict['–§–∞–º–∏–ª–∏—è'] and str(person_dict['–§–∞–º–∏–ª–∏—è']).strip() != 'nan':
        parts.append(str(person_dict['–§–∞–º–∏–ª–∏—è']).strip())
    if '–ò–º—è' in person_dict and person_dict['–ò–º—è'] and str(person_dict['–ò–º—è']).strip() != 'nan':
        parts.append(str(person_dict['–ò–º—è']).strip())
    if '–û—Ç—á–µ—Å—Ç–≤–æ' in person_dict and person_dict['–û—Ç—á–µ—Å—Ç–≤–æ'] and str(person_dict['–û—Ç—á–µ—Å—Ç–≤–æ']).strip() != 'nan':
        parts.append(str(person_dict['–û—Ç—á–µ—Å—Ç–≤–æ']).strip())
    
    if parts:
        return ' '.join(parts)
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ò–ò–ù
    return f"–õ–∏—Ü–æ {person_dict.get('–ò–ò–ù', '–ù–ï–ò–ó–í–ï–°–¢–ù–û')}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
def display_person_card(person_data, is_dict=False):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —á–µ–ª–æ–≤–µ–∫–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    
    # –ï—Å–ª–∏ —ç—Ç–æ Series, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
    if not is_dict:
        person_dict = person_data.to_dict()
    else:
        person_dict = person_data
    
    # –ü–æ–ª—É—á–∞–µ–º –§–ò–û
    fio = get_person_fio(person_dict)
    
    # –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞
    if MODULES_AVAILABLE:
        assessment = quick_risk_assessment(person_dict)
        risk_score = assessment['risk_score']
        risk_level = assessment['risk_level']
        recommendation = assessment['recommendation']
        components = assessment['components']
    else:
        # –î–µ–º–æ —Ä–∞—Å—á–µ—Ç
        risk_score = person_dict.get('risk_total_risk_score', 5.0)
        risk_level = "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π" if risk_score >= 7 else "üü° –í—ã—Å–æ–∫–∏–π" if risk_score >= 5 else "üü† –°—Ä–µ–¥–Ω–∏–π" if risk_score >= 3 else "üü¢ –ù–∏–∑–∫–∏–π"
        recommendation = "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è" if risk_score >= 5 else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å"
        components = None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ä–∏—Å–∫–∞
    risk_colors = {
        "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π": "#dc3545",
        "üü° –í—ã—Å–æ–∫–∏–π": "#ffc107",
        "üü† –°—Ä–µ–¥–Ω–∏–π": "#fd7e14",
        "üü¢ –ù–∏–∑–∫–∏–π": "#28a745"
    }
    risk_color = risk_colors.get(risk_level, "#6c757d")
    
    # –®–∞–ø–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    st.markdown(f"""
    <div class="person-card" style="border-left: 5px solid {risk_color};">
        <h2>üë§ {fio}</h2>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <p><strong>–ò–ò–ù:</strong> {person_dict.get('–ò–ò–ù', '–ù–µ —É–∫–∞–∑–∞–Ω')}</p>
                <p><strong>–í–æ–∑—Ä–∞—Å—Ç:</strong> {person_dict.get('current_age', '–ù/–î')} –ª–µ—Ç | 
                   <strong>–ü–æ–ª:</strong> {person_dict.get('gender', '–ù/–î')}</p>
            </div>
            <div style="text-align: right;">
                <h3 style="color: {risk_color};">–†–ò–°–ö-–ë–ê–õ–õ: {risk_score:.1f}/10</h3>
                <span class="risk-badge risk-{risk_level.split()[1].lower()}">{risk_level}</span>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–ª")
        st.metric("–í—Å–µ–≥–æ –¥–µ–ª", f"{person_dict.get('total_cases', 0)}")
        st.metric("–£–≥–æ–ª–æ–≤–Ω—ã—Ö –¥–µ–ª", f"{person_dict.get('criminal_count', 0)}")
        st.metric("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö", f"{person_dict.get('admin_count', 0)}")
        
        if person_dict.get('recidivism_rate', 0) > 0:
            st.metric("–ß–∞—Å—Ç–æ—Ç–∞ —Ä–µ—Ü–∏–¥–∏–≤–∞", f"{person_dict.get('recidivism_rate', 0):.2f} –¥–µ–ª/–≥–æ–¥")
    
    with col2:
        st.markdown("### üîÑ –ü–∞—Ç—Ç–µ—Ä–Ω –ø–æ–≤–µ–¥–µ–Ω–∏—è")
        pattern = person_dict.get('pattern_type', 'unknown')
        pattern_translation = {
            'mixed_unstable': '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ',
            'chronic_criminal': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫',
            'escalating': '–≠—Å–∫–∞–ª–∞—Ü–∏—è (–∞–¥–º–∏–Ω‚Üí—É–≥–æ–ª–æ–≤–∫–∞)',
            'deescalating': '–î–µ—ç—Å–∫–∞–ª–∞—Ü–∏—è',
            'single': '–ï–¥–∏–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏',
            'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        }
        st.write(f"**–¢–∏–ø:** {pattern_translation.get(pattern, pattern)}")
        
        days_since = person_dict.get('days_since_last', 365)
        st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ:** {days_since} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
        
        if 'last_violation_type' in person_dict:
            st.write(f"**–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è:** {person_dict['last_violation_type']}")
        
        age_first = person_dict.get('age_at_first_violation', 0)
        if age_first > 0:
            st.write(f"**–í–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è:** {age_first} –ª–µ—Ç")
    
    with col3:
        st.markdown("### üè† –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
        
        has_property = person_dict.get('has_property', 0)
        property_status = "‚úÖ –ï—Å—Ç—å" if has_property else "‚ùå –ù–µ—Ç"
        st.write(f"**–ò–º—É—â–µ—Å—Ç–≤–æ:** {property_status}")
        
        has_job = person_dict.get('has_job', 0)
        job_status = "‚úÖ –ï—Å—Ç—å" if has_job else "‚ùå –ù–µ—Ç"
        st.write(f"**–†–∞–±–æ—Ç–∞:** {job_status}")
        
        is_active = person_dict.get('is_active', 0)
        active_status = "üî¥ –ê–∫—Ç–∏–≤–Ω—ã–π" if is_active else "üü¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
        st.write(f"**–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** {active_status}")
        
        has_escalation = person_dict.get('has_escalation', 0)
        escalation_status = "‚ö†Ô∏è –ï—Å—Ç—å" if has_escalation else "‚úÖ –ù–µ—Ç"
        st.write(f"**–ò—Å—Ç–æ—Ä–∏—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏:** {escalation_status}")
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∏—Å–∫–∞
    if components:
        st.markdown("---")
        st.subheader("üéØ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∏—Å–∫-–±–∞–ª–ª–∞")
        
        comp_cols = st.columns(6)
        comp_names = {
            'pattern': '–ü–∞—Ç—Ç–µ—Ä–Ω',
            'history': '–ò—Å—Ç–æ—Ä–∏—è',
            'time': '–í—Ä–µ–º—è',
            'age': '–í–æ–∑—Ä–∞—Å—Ç',
            'social': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ',
            'escalation': '–≠—Å–∫–∞–ª–∞—Ü–∏—è'
        }
        
        for i, (key, value) in enumerate(components.items()):
            with comp_cols[i % 6]:
                st.metric(comp_names.get(key, key), f"{value:.1f}")
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    st.markdown("---")
    st.subheader("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∏—Å–∫–∞")
    
    if MODULES_AVAILABLE:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        forecaster = CrimeForecaster()
        forecasts = forecaster.forecast_crime_timeline(person_dict)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
        if MODULES_AVAILABLE:
            try:
                visualizer = TimelineVisualizer()
                
                # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-4 –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è
                top_crimes = list(forecasts.keys())[:4]
                
                timeline_fig = visualizer.create_risk_timeline(forecasts, top_crimes, 270)
                st.plotly_chart(timeline_fig, use_container_width=True)
            except Exception as e:
                st.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã: {str(e)}")
                st.info("üìä –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            st.info("üìä –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        st.markdown("#### üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
        
        forecast_data = []
        for crime_type, forecast in list(forecasts.items())[:6]:
            forecast_data.append({
                '–¢–∏–ø –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è': crime_type,
                '–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)': forecast['days'],
                '–î–∞—Ç–∞': forecast['date'].strftime('%d.%m.%Y'),
                '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': f"{forecast['probability']:.1f}%",
                '–ü–µ—Ä–∏–æ–¥ —Ä–∏—Å–∫–∞': f"{forecast['ci_lower']}-{forecast['ci_upper']} –¥–Ω–µ–π",
                '–£—Ä–æ–≤–µ–Ω—å': forecast['risk_level']
            })
        
        forecast_df = pd.DataFrame(forecast_data)
        st.dataframe(forecast_df, use_container_width=True, hide_index=True)
        
        # –ü–ª–∞–Ω –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        planner = InterventionPlanner()
        plan = planner.create_intervention_plan(person_dict, forecasts)
        
        st.markdown("---")
        st.subheader("üí° –ü–ª–∞–Ω –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {plan['priority_level']}")
            st.markdown(f"**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** {plan['monitoring_frequency']}")
            
            if plan['responsible_agencies']:
                st.markdown("**–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã:**")
                for agency in plan['responsible_agencies']:
                    st.write(f"‚Ä¢ {agency}")
        
        with col2:
            if plan['programs']:
                st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**")
                for program in plan['programs'][:5]:
                    st.write(f"‚Ä¢ {program}")
        
        # –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∞
        gantt_fig = planner.create_intervention_gantt(plan)
        if gantt_fig:
            st.plotly_chart(gantt_fig, use_container_width=True)
        
    else:
        # –î–µ–º–æ –ø—Ä–æ–≥–Ω–æ–∑ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
        st.info("üîÆ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
        from datetime import datetime, timedelta
        
        demo_forecasts = {
            '–ö—Ä–∞–∂–∞': {
                'crime_type': '–ö—Ä–∞–∂–∞',
                'days': 120,
                'date': datetime.now() + timedelta(days=120),
                'probability': 75.0,
                'ci_lower': 90,
                'ci_upper': 150,
                'confidence': 0.8,
                'risk_level': '–í—ã—Å–æ–∫–∏–π'
            },
            '–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ': {
                'crime_type': '–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ',
                'days': 85,
                'date': datetime.now() + timedelta(days=85),
                'probability': 60.0,
                'ci_lower': 65,
                'ci_upper': 110,
                'confidence': 0.7,
                'risk_level': '–°—Ä–µ–¥–Ω–∏–π'
            },
            '–ü–æ–±–æ–∏': {
                'crime_type': '–ü–æ–±–æ–∏',
                'days': 200,
                'date': datetime.now() + timedelta(days=200),
                'probability': 45.0,
                'ci_lower': 150,
                'ci_upper': 250,
                'confidence': 0.6,
                'risk_level': '–°—Ä–µ–¥–Ω–∏–π'
            }
        }
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        likely_crime = "–ö—Ä–∞–∂–∞"
        forecast_days = 120
        probability = 75
        
        st.markdown(f"""
        <div class="info-item">
            <h4>–ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {likely_crime}</h4>
            <p>–ü—Ä–æ–≥–Ω–æ–∑: —á–µ—Ä–µ–∑ <strong>{forecast_days} –¥–Ω–µ–π</strong> (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {probability}%)</p>
        </div>
        """, unsafe_allow_html=True)
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º–∏
        if MODULES_AVAILABLE:
            try:
                visualizer = TimelineVisualizer()
                top_crimes = list(demo_forecasts.keys())
                timeline_fig = visualizer.create_risk_timeline(demo_forecasts, top_crimes, 270)
                st.plotly_chart(timeline_fig, use_container_width=True)
            except Exception as e:
                st.warning(f"–ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–µ–º–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        st.markdown("#### üìã –î–µ–º–æ –ø—Ä–æ–≥–Ω–æ–∑—ã")
        
        forecast_data = []
        for crime_type, forecast in demo_forecasts.items():
            forecast_data.append({
                '–¢–∏–ø –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è': crime_type,
                '–î–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è': forecast['days'],
                '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': f"{forecast['probability']:.0f}%",
                '–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞': forecast['risk_level']
            })
        
        df_forecasts = pd.DataFrame(forecast_data)
        st.dataframe(df_forecasts, use_container_width=True)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.markdown("---")
    st.subheader("üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ")
    
    recommendations = []
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    st.markdown(f"""
    <div class="recommendation-card">
        <h4>üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</h4>
        <p><strong>{recommendation}</strong></p>
    </div>
    """, unsafe_allow_html=True)
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if risk_score >= 7:
        recommendations.extend([
            "üö® –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ",
            "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
            "üè• –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
        ])
    elif risk_score >= 5:
        recommendations.extend([
            "‚ö†Ô∏è –í—Å—Ç—Ä–µ—á–∏ —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é",
            "üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ",
            "üéØ –í–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–µ–≤–µ–Ω—Ü–∏–∏"
        ])
    
    if person_dict.get('has_job', 0) == 0:
        recommendations.append("üíº –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ —Å–ª—É–∂–±—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏")
    
    if person_dict.get('has_property', 0) == 0:
        recommendations.append("üè† –û—Ü–µ–Ω–∫–∞ –∂–∏–ª–∏—â–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    
    if pattern == 'mixed_unstable':
        recommendations.append("üß† –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏")
    elif pattern == 'chronic_criminal':
        recommendations.append("üîí –£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    elif pattern == 'escalating':
        recommendations.append("‚ö° –°—Ä–æ—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏")
    
    if person_dict.get('current_age', 35) < 25:
        recommendations.append("üë®‚Äçüéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –º–æ–ª–æ–¥–µ–∂–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    for rec in recommendations:
        st.markdown(f"- {rec}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∏—Å–∫–∞
st.markdown("---")

# –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
col1, col2, col3 = st.columns([3, 1, 1])

with col1:
    search_input = st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ –ò–ò–ù –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789012",
        help="–§–æ—Ä–º–∞—Ç: 12 —Ü–∏—Ñ—Ä, –º–æ–∂–Ω–æ —Å –¥–µ—Ñ–∏—Å–∞–º–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏"
    )

with col2:
    search_button = st.button("üîç –ù–∞–π—Ç–∏", type="primary", use_container_width=True)

with col3:
    if st.button("üé≤ –°–ª—É—á–∞–π–Ω—ã–π", use_container_width=True):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ò–ò–ù –¥–ª—è –¥–µ–º–æ
        random_iin = f"{np.random.randint(100000, 999999)}{np.random.randint(100000, 999999)}"
        search_input = random_iin
        st.rerun()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
if search_input or search_button:
    with st.spinner('–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...'):
        
        if MODULES_AVAILABLE:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
            is_valid, result = validate_iin(search_input)
            
            if is_valid:
                person = search_person_by_iin(result)
                
                if person is not None:
                    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–µ–ª–æ–≤–µ–∫ –ø–æ –ò–ò–ù: {result}")
                    display_person_card(person)
                    
                    # –≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
                    st.markdown("---")
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
                    report = generate_risk_report(person.to_dict())
                    
                    # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        # CSV —ç–∫—Å–ø–æ—Ä—Ç
                        person_df = pd.DataFrame([person])
                        csv = person_df.to_csv(index=False).encode('utf-8')
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
                            data=csv,
                            file_name=f'person_{result}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv',
                            mime='text/csv'
                        )
                    
                    with col2:
                        # JSON —ç–∫—Å–ø–æ—Ä—Ç —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
                        import json
                        report_json = json.dumps(report, default=str, ensure_ascii=False, indent=2)
                        st.download_button(
                            label="üìä –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (JSON)",
                            data=report_json,
                            file_name=f'report_{result}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json',
                            mime='application/json'
                        )
                    
                    with col3:
                        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
                        text_report = format_risk_summary(report)
                        st.download_button(
                            label="üìÑ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—é–º–µ (TXT)",
                            data=text_report,
                            file_name=f'summary_{result}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt',
                            mime='text/plain'
                        )
                else:
                    st.error(f"‚ùå –ò–ò–ù {result} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ò–ò–ù –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–∏–∂–µ")
            else:
                st.error(f"‚ùå {result}")
        
        else:
            # –î–µ–º–æ —Ä–µ–∂–∏–º
            st.info("‚ÑπÔ∏è –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ")
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
            demo_df = create_demo_data()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ò–ò–ù –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞
            demo_df['–ò–ò–ù'] = demo_df['–ò–ò–ù'].astype(str)
            
            # –ò—â–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ü–∏—Ñ—Ä–∞–º –ò–ò–ù
            clean_iin = re.sub(r'[^\d]', '', search_input)
            
            if len(clean_iin) >= 4:
                # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 4 —Ü–∏—Ñ—Ä–∞–º
                last_4 = clean_iin[-4:]
                matches = demo_df[demo_df['–ò–ò–ù'].str.endswith(last_4)]
                
                if not matches.empty:
                    person = matches.iloc[0]
                    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–µ–ª–æ–≤–µ–∫ –≤ –¥–µ–º–æ-–±–∞–∑–µ")
                    display_person_card(person)
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
                    person = demo_df.sample(1).iloc[0]
                    st.warning(f"‚ö†Ô∏è –ò–ò–ù –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
                    display_person_card(person)
            else:
                st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ò–ù")

# –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
st.markdown("---")
st.subheader("üí° –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞")

if MODULES_AVAILABLE:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    risk_df = get_risk_data()
    
    if risk_df is not None and not risk_df.empty and '–ò–ò–ù' in risk_df.columns:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —Ä–∏—Å–∫–∞
        examples = []
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫
        critical = risk_df[risk_df['risk_total_risk_score'] >= 7].head(2)
        for _, row in critical.iterrows():
            examples.append((row['–ò–ò–ù'], "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫"))
        
        # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        high = risk_df[(risk_df['risk_total_risk_score'] >= 5) & (risk_df['risk_total_risk_score'] < 7)].head(2)
        for _, row in high.iterrows():
            examples.append((row['–ò–ò–ù'], "üü° –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"))
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
        medium = risk_df[(risk_df['risk_total_risk_score'] >= 3) & (risk_df['risk_total_risk_score'] < 5)].head(2)
        for _, row in medium.iterrows():
            examples.append((row['–ò–ò–ù'], "üü† –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"))
        
        # –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫
        low = risk_df[risk_df['risk_total_risk_score'] < 3].head(2)
        for _, row in low.iterrows():
            examples.append((row['–ò–ò–ù'], "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"))
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        cols = st.columns(4)
        for i, (iin, risk_text) in enumerate(examples[:8]):
            with cols[i % 4]:
                iin_str = str(iin)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                if st.button(f"{iin_str[-4:]}...\n{risk_text}", key=f"example_{i}", use_container_width=True):
                    search_input = iin_str
                    st.rerun()
    else:
        # –î–µ–º–æ –ø—Ä–∏–º–µ—Ä—ã
        st.info("–ü—Ä–∏–º–µ—Ä—ã –ò–ò–ù –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞:")
        demo_df = create_demo_data()
        
        cols = st.columns(5)
        for i in range(10):
            with cols[i % 5]:
                demo_iin = demo_df.iloc[i]['–ò–ò–ù']
                demo_iin_str = str(demo_iin)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                if st.button(f"...{demo_iin_str[-4:]}", key=f"demo_{i}"):
                    search_input = demo_iin_str
                    st.rerun()

# –°–ø—Ä–∞–≤–∫–∞
with st.expander("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
    st.markdown("""
    ### üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º:
    - –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π 12-–∑–Ω–∞—á–Ω—ã–π –ò–ò–ù
    - –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–∏—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã (–æ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã)
    - –°–∏—Å—Ç–µ–º–∞ —Ç–∞–∫–∂–µ –∏—â–µ—Ç –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 4 —Ü–∏—Ñ—Ä–∞–º –ò–ò–ù
    
    ### üìä –ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
    - **–†–∏—Å–∫-–±–∞–ª–ª** - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç 0 –¥–æ 10
    - **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∏—Å–∫–∞** - –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ 6 —Ñ–∞–∫—Ç–æ—Ä–∞–º
    - **–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑** - –≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ –¥–æ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    - **–ü–ª–∞–Ω –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Å—Ä–æ–∫–∏
    
    ### üéØ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∏—Å–∫-–±–∞–ª–ª–∞:
    - üî¥ **7-10 –±–∞–ª–ª–æ–≤**: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ
    - üü° **5-6 –±–∞–ª–ª–æ–≤**: –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - —É—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å
    - üü† **3-4 –±–∞–ª–ª–∞**: –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    - üü¢ **0-2 –±–∞–ª–ª–∞**: –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å
    
    ### üìà –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∏—Å–∫–∞:
    - **–ü–∞—Ç—Ç–µ—Ä–Ω** - —Ç–∏–ø –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è (25% –≤–µ—Å–∞)
    - **–ò—Å—Ç–æ—Ä–∏—è** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ç—è–∂–µ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–π (20%)
    - **–í—Ä–µ–º—è** - –¥–∞–≤–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è (15%)
    - **–í–æ–∑—Ä–∞—Å—Ç** - —Ç–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç –∏ –≤–æ–∑—Ä–∞—Å—Ç –¥–µ–±—é—Ç–∞ (10%)
    - **–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ** - —Ä–∞–±–æ—Ç–∞, –∏–º—É—â–µ—Å—Ç–≤–æ, —Å–µ–º—å—è (15%)
    - **–≠—Å–∫–∞–ª–∞—Ü–∏—è** - —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è –∫ —É—Ç—è–∂–µ–ª–µ–Ω–∏—é (15%)
    
    ### üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:
    - **CSV** - —Ç–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ
    - **JSON** - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
    - **TXT** - —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
with st.sidebar:
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞")
    
    # –°—á–µ—Ç—á–∏–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—Ä–∞—Ç—å –∏–∑ –ë–î)
    st.metric("–ü–æ–∏—Å–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è", "127")
    st.metric("–ù–∞–π–¥–µ–Ω–æ –ª–∏—Ü", "89")
    st.metric("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤", "12")
    
    st.markdown("---")
    
    # –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    st.markdown("### üéØ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    
    if st.button("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏", use_container_width=True):
        st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    if st.button("üü° –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è", use_container_width=True):
        st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    if st.button("üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü", use_container_width=True):
        st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    st.markdown("---")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞")
    
    show_components = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∏—Å–∫–∞", value=True)
    show_timeline = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É", value=True)
    show_plan = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–ª–∞–Ω –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞", value=True)