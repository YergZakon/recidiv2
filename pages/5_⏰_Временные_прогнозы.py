"""
‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω –¥–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import os
import sys
from datetime import datetime, timedelta
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from utils.data_loader import (
        load_all_data,
        get_risk_data,
        get_crime_statistics
    )
    from utils.risk_calculator import (
        RiskCalculator,
        CrimeForecaster,
        quick_risk_assessment
    )
    from utils.forecasting import (
        TimelineVisualizer,
        InterventionPlanner,
        generate_risk_report
    )
    MODULES_AVAILABLE = True
except ImportError:
    MODULES_AVAILABLE = False
    st.warning("‚ö†Ô∏è –ú–æ–¥—É–ª–∏ utils –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã",
    page_icon="‚è∞",
    layout="wide"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .forecast-card {
        background: linear-gradient(135deg, #e3f2fd, #bbdefb);
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .timeline-item {
        position: relative;
        padding: 1rem;
        margin: 0.5rem 0;
        border-left: 3px solid #2196f3;
        background-color: #f5f5f5;
    }
    .risk-level-critical {
        background-color: #ffebee;
        border-left-color: #f44336;
    }
    .risk-level-high {
        background-color: #fff8e1;
        border-left-color: #ff9800;
    }
    .risk-level-medium {
        background-color: #e8f5e9;
        border-left-color: #4caf50;
    }
    .calendar-day {
        display: inline-block;
        width: 40px;
        height: 40px;
        line-height: 40px;
        text-align: center;
        margin: 2px;
        border-radius: 5px;
        font-size: 12px;
    }
    .day-critical { background-color: #ef5350; color: white; }
    .day-high { background-color: #ffa726; color: white; }
    .day-medium { background-color: #66bb6a; color: white; }
    .day-low { background-color: #e0e0e0; }
    .recommendation-box {
        background-color: #e1f5fe;
        border: 1px solid #03a9f4;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
    }
    .stat-box {
        background-color: white;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

st.title("‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
st.markdown("### –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω –¥–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_forecast_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    if MODULES_AVAILABLE:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            risk_df = get_risk_data()
            if risk_df is not None and not risk_df.empty:
                return risk_df
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)
    n_people = 100
    
    demo_data = {
        '–ò–ò–ù': [f"{np.random.randint(100000, 999999)}{np.random.randint(100000, 999999)}" for _ in range(n_people)],
        '–§–ò–û': [f"–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i:03d}" for i in range(1, n_people + 1)],
        'current_age': np.random.normal(35, 12, n_people).clip(18, 70).astype(int),
        'gender': np.random.choice(['–ú', '–ñ'], n_people, p=[0.85, 0.15]),
        'pattern_type': np.random.choice([
            'mixed_unstable', 'chronic_criminal', 'escalating', 'deescalating', 'single'
        ], n_people, p=[0.727, 0.136, 0.07, 0.057, 0.01]),
        'total_cases': np.random.poisson(4, n_people) + 1,
        'criminal_count': np.random.poisson(1.5, n_people),
        'admin_count': np.random.poisson(2.5, n_people),
        'risk_total_risk_score': np.random.beta(2, 5, n_people) * 10,
        'last_violation_date': [
            datetime.now() - timedelta(days=np.random.randint(1, 365))
            for _ in range(n_people)
        ],
        'has_property': np.random.choice([0, 1], n_people, p=[0.6, 0.4]),
        'has_job': np.random.choice([0, 1], n_people, p=[0.4, 0.6]),
        'region': np.random.choice(['–ê—Å—Ç–∞–Ω–∞', '–ê–ª–º–∞—Ç—ã', '–®—ã–º–∫–µ–Ω—Ç', '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞', '–ê–∫—Ç–æ–±–µ'], n_people),
        'days_since_last': np.random.randint(1, 730, n_people),
        'age_at_first_violation': np.random.normal(25, 8, n_people).clip(14, 50).astype(int),
        'recidivism_rate': np.random.uniform(0.1, 3, n_people),
        'has_escalation': np.random.choice([0, 1], n_people, p=[0.8, 0.2])
    }
    
    return pd.DataFrame(demo_data)

# –ë–∞–∑–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
CRIME_FORECAST_BASE = {
    '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ': {'days': 109, 'probability_base': 82.3, 'color': '#e74c3c'},
    '–ö—Ä–∞–∂–∞': {'days': 146, 'probability_base': 87.3, 'color': '#f39c12'},
    '–£–±–∏–π—Å—Ç–≤–æ': {'days': 143, 'probability_base': 97.0, 'color': '#8e44ad'},
    '–í—ã–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ': {'days': 144, 'probability_base': 100.7, 'color': '#e67e22'},
    '–ì—Ä–∞–±–µ–∂': {'days': 148, 'probability_base': 60.2, 'color': '#3498db'},
    '–†–∞–∑–±–æ–π': {'days': 150, 'probability_base': 20.2, 'color': '#27ae60'},
    '–ò–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ': {'days': 157, 'probability_base': 65.6, 'color': '#c0392b'},
    '–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ': {'days': 155, 'probability_base': 45.0, 'color': '#f1c40f'}
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
forecast_df = load_forecast_data()

if forecast_df is not None and len(forecast_df) > 0:
    
    # –§–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.sidebar.header("üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞
    risk_filter = st.sidebar.select_slider(
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–±–∞–ª–ª:",
        options=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        value=5
    )
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    filtered_df = forecast_df[forecast_df['risk_total_risk_score'] >= risk_filter].copy()
    
    if len(filtered_df) == 0:
        st.warning(f"–ù–µ—Ç –ª—é–¥–µ–π —Å —Ä–∏—Å–∫-–±–∞–ª–ª–æ–º ‚â• {risk_filter}. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö.")
        filtered_df = forecast_df.copy()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∏—Å–∫—É
    filtered_df = filtered_df.sort_values('risk_total_risk_score', ascending=False)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if len(filtered_df) > 50:
        filtered_df = filtered_df.head(50)
        st.info("–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ø-50 —á–µ–ª–æ–≤–µ–∫ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–∏—Å–∫–æ–º")
    
    # –í—ã–±–æ—Ä —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    st.subheader("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Ü–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
    person_options = []
    for _, row in filtered_df.iterrows():
        risk_emoji = "üî¥" if row['risk_total_risk_score'] >= 7 else "üü°" if row['risk_total_risk_score'] >= 5 else "üü†"
        option = f"{risk_emoji} {row['–ò–ò–ù']} | {row.get('–§–ò–û', '–ë–µ–∑ –∏–º–µ–Ω–∏')} | –†–∏—Å–∫: {row['risk_total_risk_score']:.1f}"
        person_options.append(option)
    
    selected_option = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞:",
        options=person_options,
        help="–°–ø–∏—Å–æ–∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–∏—Å–∫–∞"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    selected_idx = person_options.index(selected_option)
    selected_person = filtered_df.iloc[selected_idx]
    
    # –¢–∏–ø—ã –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìä –¢–∏–ø—ã –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π")
    
    all_crimes = list(CRIME_FORECAST_BASE.keys())
    selected_crimes = st.sidebar.multiselect(
        "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:",
        all_crimes,
        default=['–ö—Ä–∞–∂–∞', '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ', '–£–±–∏–π—Å—Ç–≤–æ', '–ì—Ä–∞–±–µ–∂']
    )
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç
    time_horizon = st.sidebar.slider(
        "–í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç (–¥–Ω–∏):",
        min_value=90,
        max_value=365,
        value=270,
        step=30
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.sidebar.markdown("---")
    show_confidence = st.sidebar.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã", value=True)
    show_calendar = st.sidebar.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", value=True)
    show_gantt = st.sidebar.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–ª–∞–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", value=True)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    st.markdown("---")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–µ–ª–æ–≤–µ–∫–µ
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("#### üë§ –õ–∏—á–Ω–æ—Å—Ç—å")
        st.write(f"**–ò–ò–ù:** {selected_person['–ò–ò–ù']}")
        st.write(f"**–í–æ–∑—Ä–∞—Å—Ç:** {selected_person.get('current_age', '–ù/–î')} –ª–µ—Ç")
        st.write(f"**–ü–æ–ª:** {selected_person.get('gender', '–ù/–î')}")
    
    with col2:
        st.markdown("#### üéØ –†–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å")
        risk_score = selected_person.get('risk_total_risk_score', 0)
        risk_category = "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π" if risk_score >= 7 else "üü° –í—ã—Å–æ–∫–∏–π" if risk_score >= 5 else "üü† –°—Ä–µ–¥–Ω–∏–π" if risk_score >= 3 else "üü¢ –ù–∏–∑–∫–∏–π"
        st.metric("–†–∏—Å–∫-–±–∞–ª–ª", f"{risk_score:.1f}/10")
        st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {risk_category}")
    
    with col3:
        st.markdown("#### üìä –ò—Å—Ç–æ—Ä–∏—è")
        st.write(f"**–í—Å–µ–≥–æ –¥–µ–ª:** {selected_person.get('total_cases', 0)}")
        st.write(f"**–£–≥–æ–ª–æ–≤–Ω—ã—Ö:** {selected_person.get('criminal_count', 0)}")
        st.write(f"**–ê–¥–º–∏–Ω:** {selected_person.get('admin_count', 0)}")
    
    with col4:
        st.markdown("#### üîÑ –ü–∞—Ç—Ç–µ—Ä–Ω")
        pattern = selected_person.get('pattern_type', 'unknown')
        pattern_translation = {
            'mixed_unstable': '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ',
            'chronic_criminal': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π',
            'escalating': '–≠—Å–∫–∞–ª–∞—Ü–∏—è',
            'deescalating': '–î–µ—ç—Å–∫–∞–ª–∞—Ü–∏—è',
            'single': '–ï–¥–∏–Ω–∏—á–Ω–æ–µ'
        }
        st.write(f"**–¢–∏–ø:** {pattern_translation.get(pattern, pattern)}")
        st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ:** {selected_person.get('days_since_last', 0)} –¥–Ω. –Ω–∞–∑–∞–¥")
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    st.markdown("---")
    st.subheader("üìà –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
    
    if MODULES_AVAILABLE:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
        forecaster = CrimeForecaster()
        forecasts = forecaster.forecast_crime_timeline(selected_person.to_dict())
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è–º
        filtered_forecasts = {k: v for k, v in forecasts.items() if k in selected_crimes}
        
        if filtered_forecasts:
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
            visualizer = TimelineVisualizer()
            timeline_fig = visualizer.create_risk_timeline(filtered_forecasts, selected_crimes, time_horizon)
            st.plotly_chart(timeline_fig, use_container_width=True)
            
            # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            if show_calendar:
                st.subheader("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞—Ç")
                calendar_fig = visualizer.create_calendar_heatmap(filtered_forecasts)
                if calendar_fig:
                    st.plotly_chart(calendar_fig, use_container_width=True)
        else:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    else:
        # –î–µ–º–æ-—Ä–µ–∂–∏–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        st.info("üîÆ –î–µ–º–æ-—Ä–µ–∂–∏–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø—Ä–æ–≥–Ω–æ–∑—ã
        demo_forecasts = {}
        person_dict = selected_person.to_dict()
        
        for crime_type in selected_crimes:
            base_data = CRIME_FORECAST_BASE[crime_type]
            
            # –ü—Ä–æ—Å—Ç—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            age_mod = 0.8 if person_dict.get('current_age', 35) < 25 else 1.2 if person_dict.get('current_age', 35) > 45 else 1.0
            pattern_mod = 0.7 if pattern == 'chronic_criminal' else 0.9 if pattern == 'mixed_unstable' else 1.0
            social_mod = 0.85 if person_dict.get('has_property', 0) == 0 else 1.0
            
            forecast_days = int(base_data['days'] * age_mod * pattern_mod * social_mod)
            forecast_days = max(30, min(365, forecast_days))
            
            probability = min(95, max(10, risk_score * 10 * (base_data['probability_base'] / 100)))
            
            demo_forecasts[crime_type] = {
                'days': forecast_days,
                'date': datetime.now() + timedelta(days=forecast_days),
                'probability': probability,
                'ci_lower': int(forecast_days * 0.7),
                'ci_upper': int(forecast_days * 1.4),
                'color': base_data['color']
            }
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ-–ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        if demo_forecasts:
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
            fig = go.Figure()
            
            for crime_type, forecast in demo_forecasts.items():
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é
                dates = [datetime.now() + timedelta(days=i) for i in range(0, time_horizon, 7)]
                risk_values = []
                
                for date in dates:
                    days_from_now = (date - datetime.now()).days
                    days_to_forecast = forecast['days']
                    
                    if days_from_now < days_to_forecast * 0.5:
                        risk = forecast['probability'] * 0.3
                    elif days_from_now < days_to_forecast:
                        progress = (days_from_now - days_to_forecast * 0.5) / (days_to_forecast * 0.5)
                        risk = forecast['probability'] * (0.3 + 0.7 * progress)
                    elif days_from_now == days_to_forecast:
                        risk = forecast['probability']
                    else:
                        decay = np.exp(-0.02 * (days_from_now - days_to_forecast))
                        risk = forecast['probability'] * 0.7 * decay
                    
                    risk_values.append(risk)
                
                fig.add_trace(go.Scatter(
                    x=dates,
                    y=risk_values,
                    mode='lines+markers',
                    name=f"{crime_type} ({forecast['probability']:.0f}%)",
                    line=dict(color=forecast['color'], width=2),
                    marker=dict(size=4)
                ))
                
                # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –Ω–∞ –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑–∞
                fig.add_vline(
                    x=forecast['date'],
                    line_dash="dash",
                    line_color=forecast['color'],
                    annotation_text=f"{crime_type}<br>{forecast['days']}–¥",
                    annotation_position="top"
                )
            
            fig.update_layout(
                title="–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤",
                xaxis_title="–î–∞—Ç–∞",
                yaxis_title="–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (%)",
                height=500,
                hovermode='x unified',
                yaxis=dict(range=[0, 100])
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
    
    forecast_table = []
    
    if MODULES_AVAILABLE and 'filtered_forecasts' in locals():
        for crime_type, forecast in filtered_forecasts.items():
            forecast_table.append({
                '–¢–∏–ø –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è': crime_type,
                '–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)': forecast['days'],
                '–î–∞—Ç–∞': forecast['date'].strftime('%d.%m.%Y'),
                '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)': f"{forecast['probability']:.1f}",
                '–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª': f"{forecast['ci_lower']}-{forecast['ci_upper']} –¥–Ω–µ–π",
                '–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞': forecast['risk_level'],
                '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': forecast.get('confidence', '–°—Ä–µ–¥–Ω—è—è')
            })
    else:
        # –î–µ–º–æ —Ç–∞–±–ª–∏—Ü–∞
        for crime_type, forecast in demo_forecasts.items():
            risk_level = "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥" if forecast['days'] < 60 else "üü° –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫" if forecast['days'] < 120 else "üü† –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫" if forecast['days'] < 180 else "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
            
            forecast_table.append({
                '–¢–∏–ø –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è': crime_type,
                '–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)': forecast['days'],
                '–î–∞—Ç–∞': forecast['date'].strftime('%d.%m.%Y'),
                '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)': f"{forecast['probability']:.1f}",
                '–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª': f"{forecast['ci_lower']}-{forecast['ci_upper']} –¥–Ω–µ–π",
                '–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞': risk_level,
                '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': '–°—Ä–µ–¥–Ω—è—è'
            })
    
    if forecast_table:
        forecast_df_display = pd.DataFrame(forecast_table)
        forecast_df_display = forecast_df_display.sort_values('–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)')
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
        def style_risk_level(val):
            if '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π' in str(val):
                return 'background-color: #ffcdd2'
            elif '–í—ã—Å–æ–∫–∏–π' in str(val):
                return 'background-color: #ffe0b2'
            elif '–°—Ä–µ–¥–Ω–∏–π' in str(val):
                return 'background-color: #fff9c4'
            else:
                return 'background-color: #c8e6c9'
        
        styled_df = forecast_df_display.style.applymap(
            style_risk_level, 
            subset=['–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞']
        )
        
        st.dataframe(styled_df, use_container_width=True, hide_index=True)
    
    # –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞—Ç
    if show_calendar and forecast_table:
        st.subheader("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### –ë–ª–∏–∂–∞–π—à–∏–µ 90 –¥–Ω–µ–π:")
            critical_dates = []
            
            for item in forecast_table:
                if item['–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)'] <= 90:
                    date = datetime.now() + timedelta(days=item['–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)'])
                    critical_dates.append({
                        'date': date,
                        'crime': item['–¢–∏–ø –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è'],
                        'days': item['–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)'],
                        'prob': float(item['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)'].replace('%', ''))
                    })
            
            critical_dates.sort(key=lambda x: x['days'])
            
            for event in critical_dates[:5]:
                color = "üî¥" if event['days'] <= 30 else "üü°" if event['days'] <= 60 else "üü†"
                st.markdown(f"""
                <div class="timeline-item {'risk-level-critical' if event['days'] <= 30 else 'risk-level-high' if event['days'] <= 60 else ''}">
                    {color} <strong>{event['crime']}</strong><br>
                    –ß–µ—Ä–µ–∑ {event['days']} –¥–Ω–µ–π ({event['date'].strftime('%d.%m.%Y')})<br>
                    –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {event['prob']:.0f}%
                </div>
                """, unsafe_allow_html=True)
            
            if not critical_dates:
                st.success("‚úÖ –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 90 –¥–Ω–µ–π")
        
        with col2:
            st.markdown("#### –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ —Ä–∏—Å–∫–∏ (90-180 –¥–Ω–µ–π):")
            medium_dates = []
            
            for item in forecast_table:
                if 90 < item['–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)'] <= 180:
                    date = datetime.now() + timedelta(days=item['–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)'])
                    medium_dates.append({
                        'date': date,
                        'crime': item['–¢–∏–ø –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è'],
                        'days': item['–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)'],
                        'prob': float(item['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)'].replace('%', ''))
                    })
            
            medium_dates.sort(key=lambda x: x['days'])
            
            for event in medium_dates[:5]:
                st.markdown(f"""
                <div class="timeline-item">
                    üü° <strong>{event['crime']}</strong><br>
                    –ß–µ—Ä–µ–∑ {event['days']} –¥–Ω–µ–π ({event['date'].strftime('%d.%m.%Y')})<br>
                    –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {event['prob']:.0f}%
                </div>
                """, unsafe_allow_html=True)
            
            if not medium_dates:
                st.info("‚ÑπÔ∏è –ù–µ—Ç —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤")
    
    # –ü–ª–∞–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    if show_gantt and MODULES_AVAILABLE:
        st.markdown("---")
        st.subheader("üìã –ü–ª–∞–Ω –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        
        try:
            planner = InterventionPlanner()
            plan = planner.create_intervention_plan(selected_person.to_dict(), filtered_forecasts)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {plan['priority_level']}")
                st.markdown(f"**–ß–∞—Å—Ç–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:** {plan['monitoring_frequency']}")
            
            with col2:
                if plan['responsible_agencies']:
                    st.markdown("**–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã:**")
                    for agency in plan['responsible_agencies']:
                        st.write(f"‚Ä¢ {agency}")
            
            # –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞
            gantt_fig = planner.create_intervention_gantt(plan)
            if gantt_fig:
                st.plotly_chart(gantt_fig, use_container_width=True)
            
            # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º
            if plan['programs']:
                st.markdown("#### –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:")
                program_cols = st.columns(3)
                for i, program in enumerate(plan['programs']):
                    with program_cols[i % 3]:
                        st.markdown(f"""
                        <div class="recommendation-box">
                            ‚Ä¢ {program}
                        </div>
                        """, unsafe_allow_html=True)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.markdown("---")
    st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    
    recommendations = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∏—Å–∫–∏
    if forecast_table:
        critical_risks = [f for f in forecast_table if f['–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)'] <= 60]
        
        if critical_risks:
            top_risk = critical_risks[0]
            recommendations.append(f"üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö**: {top_risk['–¢–∏–ø –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è']} —á–µ—Ä–µ–∑ {top_risk['–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)']} –¥–Ω–µ–π")
            recommendations.append(f"‚è∞ **–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ**: {(datetime.now() + timedelta(days=top_risk['–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)'] - 30)).strftime('%d.%m.%Y')}")
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è
            crime_type = top_risk['–¢–∏–ø –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è']
            if crime_type in ['–ö—Ä–∞–∂–∞', '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ']:
                recommendations.extend([
                    "üíº **–°—Ä–æ—á–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ** —á–µ—Ä–µ–∑ —Å–ª—É–∂–±—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏",
                    "üí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** –∏ –ø–æ–º–æ—â—å —Å –¥–æ–ª–≥–∞–º–∏",
                    "üè† **–û—Ü–µ–Ω–∫–∞ –∂–∏–ª–∏—â–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π** –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
                ])
            elif crime_type in ['–£–±–∏–π—Å—Ç–≤–æ', '–†–∞–∑–±–æ–π', '–ì—Ä–∞–±–µ–∂']:
                recommendations.extend([
                    "üß† **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–µ–π",
                    "üëÆ **–£—Å–∏–ª–µ–Ω–Ω—ã–π –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å** - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                    "üíä **–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ** –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Å–∏—Ö–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤"
                ])
            elif crime_type == '–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ':
                recommendations.extend([
                    "üèÉ **–î–æ—Å—É–≥–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã** - —Å–ø–æ—Ä—Ç, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ",
                    "üö´ **–ö–æ–Ω—Ç—Ä–æ–ª—å –∞–ª–∫–æ–≥–æ–ª—è** - –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏",
                    "üë• **–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è** - –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"
                ])
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
    if risk_score >= 7:
        recommendations.append("üö® **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ç—Ä–æ–ª—è** - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä 24/7")
    elif risk_score >= 5:
        recommendations.append("‚ö†Ô∏è **–£—Å–∏–ª–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** - –≤—Å—Ç—Ä–µ—á–∏ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é")
    
    if selected_person.get('has_job', 0) == 0:
        recommendations.append("üíº **–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ** - –∫–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞")
    
    if selected_person.get('has_property', 0) == 0:
        recommendations.append("üè† **–ñ–∏–ª–∏—â–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞** - —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —É—Å–ª–æ–≤–∏–π –∂–∏–∑–Ω–∏")
    
    if pattern == 'mixed_unstable':
        recommendations.append("üß† **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è** - —Ä–∞–±–æ—Ç–∞ —Å –∏–º–ø—É–ª—å—Å–∏–≤–Ω–æ—Å—Ç—å—é")
    elif pattern == 'chronic_criminal':
        recommendations.append("üîí **–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–µ–∫—Ä–∏–º–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏** - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    for rec in recommendations:
        st.markdown(f"- {rec}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
    st.markdown("---")
    st.subheader("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_data = {
        'person_info': {
            '–ò–ò–ù': selected_person['–ò–ò–ù'],
            '–§–ò–û': selected_person.get('–§–ò–û', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            '–í–æ–∑—Ä–∞—Å—Ç': selected_person.get('current_age', '–ù/–î'),
            '–†–∏—Å–∫_–±–∞–ª–ª': risk_score,
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è_—Ä–∏—Å–∫–∞': risk_category,
            '–ü–∞—Ç—Ç–µ—Ä–Ω': pattern_translation.get(pattern, pattern)
        },
        'forecasts': forecast_table,
        'recommendations': recommendations,
        'analysis_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # JSON —ç–∫—Å–ø–æ—Ä—Ç
        json_str = json.dumps(export_data, ensure_ascii=False, indent=2, default=str)
        st.download_button(
            label="üìä –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (JSON)",
            data=json_str,
            file_name=f'forecast_{selected_person["–ò–ò–ù"]}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json',
            mime='application/json'
        )
    
    with col2:
        # CSV —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        if forecast_table:
            forecast_export_df = pd.DataFrame(forecast_table)
            csv = forecast_export_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üìã –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã (CSV)",
                data=csv,
                file_name=f'forecasts_{selected_person["–ò–ò–ù"]}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv',
                mime='text/csv'
            )
    
    with col3:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        text_report = f"""–û–¢–ß–ï–¢ –û –í–†–ï–ú–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–ê–•
–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –õ–ò–¶–ï:
–ò–ò–ù: {selected_person['–ò–ò–ù']}
–í–æ–∑—Ä–∞—Å—Ç: {selected_person.get('current_age', '–ù/–î')} –ª–µ—Ç
–†–∏—Å–∫-–±–∞–ª–ª: {risk_score:.1f}/10 ({risk_category})
–ü–∞—Ç—Ç–µ—Ä–Ω: {pattern_translation.get(pattern, pattern)}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–ê–¢–´:
"""
        for item in forecast_table[:5]:
            text_report += f"\n{item['–¢–∏–ø –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è']}: {item['–î–∞—Ç–∞']} ({item['–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)']} –¥–Ω–µ–π) - {item['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)']}"
        
        text_report += "\n\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
        for rec in recommendations:
            text_report += f"\n{rec.replace('**', '')}"
        
        st.download_button(
            label="üìÑ –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (TXT)",
            data=text_report,
            file_name=f'report_{selected_person["–ò–ò–ù"]}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt',
            mime='text/plain'
        )

else:
    st.error("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    st.markdown("""
    ### üìÅ –¢—Ä–µ–±—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö:
    –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –≤ –ø–∞–ø–∫–µ `data/` –æ–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤:
    - `RISK_ANALYSIS_RESULTS.xlsx` (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
    - `ML_DATASET_COMPLETE.xlsx` (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)
    
    ### üìä –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:
    –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏:
    - –ò–ò–ù, –§–ò–û
    - risk_total_risk_score (—Ä–∏—Å–∫-–±–∞–ª–ª)
    - current_age (–≤–æ–∑—Ä–∞—Å—Ç)
    - pattern_type (—Ç–∏–ø –ø–∞—Ç—Ç–µ—Ä–Ω–∞)
    - total_cases, criminal_count, admin_count
    - has_property, has_job (—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã)
    """)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
with st.sidebar:
    st.markdown("---")
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    
    if forecast_df is not None and not forecast_df.empty:
        total_people = len(forecast_df)
        high_risk = len(forecast_df[forecast_df['risk_total_risk_score'] >= 5])
        critical_risk = len(forecast_df[forecast_df['risk_total_risk_score'] >= 7])
        
        st.metric("–í—Å–µ–≥–æ –≤ –±–∞–∑–µ", f"{total_people:,}")
        st.metric("–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ (5+)", f"{high_risk:,}")
        st.metric("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ (7+)", f"{critical_risk:,}")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        if 'pattern_type' in forecast_df.columns:
            st.markdown("---")
            st.markdown("### üîÑ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è")
            pattern_counts = forecast_df['pattern_type'].value_counts()
            for pattern, count in pattern_counts.items():
                percent = count / total_people * 100
                st.write(f"**{pattern}**: {count} ({percent:.1f}%)")
    
    st.markdown("---")
    st.markdown("### ‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")
    
    with st.expander("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã"):
        st.markdown("""
        **–ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∏—Ç—ã–≤–∞–µ—Ç:**
        - –ë–∞–∑–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        - –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        - –ü–∞—Ç—Ç–µ—Ä–Ω –ø–æ–≤–µ–¥–µ–Ω–∏—è
        - –°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
        - –ò—Å—Ç–æ—Ä–∏—é –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–π
        
        **–í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ (–±–∞–∑–æ–≤—ã–µ):**
        - –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ: 109 –¥–Ω–µ–π
        - –£–±–∏–π—Å—Ç–≤–æ: 143 –¥–Ω—è
        - –ö—Ä–∞–∂–∞: 146 –¥–Ω–µ–π
        - –†–∞–∑–±–æ–π: 150 –¥–Ω–µ–π
        - –ò–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ: 157 –¥–Ω–µ–π
        
        **–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:**
        - –ú–æ–ª–æ–¥–æ–π –≤–æ–∑—Ä–∞—Å—Ç: -20% –≤—Ä–µ–º–µ–Ω–∏
        - –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: -10%
        - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–∞–±–æ—Ç—ã: -10%
        - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞: -15%
        """)