"""
–ú–æ–¥—É–ª—å —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫-–±–∞–ª–ª–æ–≤ –∏ –æ—Ü–µ–Ω–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ—Ü–∏–¥–∏–≤–∞
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞ 146,570 –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–π
"""

import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, Tuple, Optional

class RiskCalculator:
    """
    –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫-–±–∞–ª–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    """
    
    def __init__(self):
        # –í–µ—Å–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)
        self.weights = {
            'pattern_weight': 0.25,      # –ü–∞—Ç—Ç–µ—Ä–Ω –ø–æ–≤–µ–¥–µ–Ω–∏—è
            'history_weight': 0.20,      # –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π
            'time_weight': 0.15,         # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä
            'age_weight': 0.10,          # –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä
            'social_weight': 0.15,       # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            'escalation_weight': 0.15    # –§–∞–∫—Ç–æ—Ä—ã —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        }
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–∏—Å–∫–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (–∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)
        self.pattern_risks = {
            'mixed_unstable': 0.8,       # 72.7% –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
            'chronic_criminal': 0.9,     # 13.6% - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
            'escalating': 0.85,          # 7% - –æ–ø–∞—Å–Ω–∞—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è
            'deescalating': 0.4,         # 5.7% - —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞
            'single': 0.3,               # 1% - –µ–¥–∏–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
            'unknown': 0.5               # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        }
    
    def calculate_risk_score(self, person_data: Dict) -> Tuple[float, Dict]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–∏—Å–∫-–±–∞–ª–ª –æ—Ç 0 –¥–æ 10
        
        Args:
            person_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ
            
        Returns:
            risk_score: –†–∏—Å–∫-–±–∞–ª–ª (0-10)
            components: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        """
        components = {}
        
        # 1. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        pattern = person_data.get('pattern_type', 'unknown')
        pattern_score = self.pattern_risks.get(pattern, 0.5) * 10
        components['pattern'] = pattern_score * self.weights['pattern_weight']
        
        # 2. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π
        history_score = self._calculate_history_score(person_data)
        components['history'] = history_score * self.weights['history_weight']
        
        # 3. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        time_score = self._calculate_time_score(person_data)
        components['time'] = time_score * self.weights['time_weight']
        
        # 4. –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        age_score = self._calculate_age_score(person_data)
        components['age'] = age_score * self.weights['age_weight']
        
        # 5. –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        social_score = self._calculate_social_score(person_data)
        components['social'] = social_score * self.weights['social_weight']
        
        # 6. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        escalation_score = self._calculate_escalation_score(person_data)
        components['escalation'] = escalation_score * self.weights['escalation_weight']
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫-–±–∞–ª–ª
        risk_score = sum(components.values())
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-10
        risk_score = max(0, min(10, risk_score))
        
        return risk_score, components
    
    def _calculate_history_score(self, data: Dict) -> float:
        """
        –û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–π (0-10)
        """
        total_cases = data.get('total_cases', 0)
        criminal_count = data.get('criminal_count', 0)
        admin_count = data.get('admin_count', 0)
        
        # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–µ–ª
        if total_cases == 0:
            return 0
        elif total_cases <= 2:
            base_score = 2
        elif total_cases <= 5:
            base_score = 4
        elif total_cases <= 10:
            base_score = 6
        else:
            base_score = 8
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —É–≥–æ–ª–æ–≤–Ω—ã—Ö/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö
        if criminal_count > 0:
            criminal_ratio = criminal_count / total_cases
            base_score += criminal_ratio * 2  # –î–æ +2 –±–∞–ª–ª–æ–≤ –∑–∞ —É–≥–æ–ª–æ–≤–Ω—ã–µ
        
        return min(10, base_score)
    
    def _calculate_time_score(self, data: Dict) -> float:
        """
        –û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (0-10)
        """
        # –î–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        days_since_last = data.get('days_since_last', 365)
        
        if days_since_last < 30:
            time_score = 10  # –û—á–µ–Ω—å –Ω–µ–¥–∞–≤–Ω–æ
        elif days_since_last < 90:
            time_score = 8   # –ù–µ–¥–∞–≤–Ω–æ
        elif days_since_last < 180:
            time_score = 6   # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ
        elif days_since_last < 365:
            time_score = 4   # –î–∞–≤–Ω–æ
        else:
            time_score = 2   # –û—á–µ–Ω—å –¥–∞–≤–Ω–æ
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—Ü–∏–¥–∏–≤–∞
        recidivism_rate = data.get('recidivism_rate', 0)
        if recidivism_rate > 2:  # –ë–æ–ª–µ–µ 2 –¥–µ–ª –≤ –≥–æ–¥
            time_score = min(10, time_score + 2)
        
        return time_score
    
    def _calculate_age_score(self, data: Dict) -> float:
        """
        –û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ (0-10)
        """
        age = data.get('current_age', 35)
        age_at_first = data.get('age_at_first_violation', age)
        
        # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤–æ–∑—Ä–∞—Å—Ç—É
        if 18 <= age <= 25:
            base_score = 8  # –ú–æ–ª–æ–¥—ã–µ - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        elif 26 <= age <= 35:
            base_score = 6  # –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç
        elif 36 <= age <= 45:
            base_score = 4  # –ó—Ä–µ–ª—ã–π –≤–æ–∑—Ä–∞—Å—Ç
        else:
            base_score = 2  # –°—Ç–∞—Ä—à–∏–π –≤–æ–∑—Ä–∞—Å—Ç
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞ —Ä–∞–Ω–Ω–∏–π –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –¥–µ–±—é—Ç
        if age_at_first < 18:
            base_score += 3
        elif age_at_first < 21:
            base_score += 2
        elif age_at_first < 25:
            base_score += 1
        
        return min(10, base_score)
    
    def _calculate_social_score(self, data: Dict) -> float:
        """
        –û—Ü–µ–Ω–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (0-10)
        """
        score = 5  # –ë–∞–∑–æ–≤—ã–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
        
        # –§–∞–∫—Ç–æ—Ä—ã, —Å–Ω–∏–∂–∞—é—â–∏–µ —Ä–∏—Å–∫
        if data.get('has_property', 0) == 1:
            score -= 2  # –ù–∞–ª–∏—á–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞
        if data.get('has_job', 0) == 1:
            score -= 2  # –ù–∞–ª–∏—á–∏–µ —Ä–∞–±–æ—Ç—ã
        if data.get('has_family', 0) == 1:
            score -= 1  # –°–µ–º—å—è
        
        # –§–∞–∫—Ç–æ—Ä—ã, –ø–æ–≤—ã—à–∞—é—â–∏–µ —Ä–∏—Å–∫
        if data.get('has_property', 0) == 0:
            score += 1  # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞
        if data.get('has_job', 0) == 0:
            score += 1  # –ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞
        if data.get('substance_abuse', 0) == 1:
            score += 2  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        
        return max(0, min(10, score))
    
    def _calculate_escalation_score(self, data: Dict) -> float:
        """
        –û—Ü–µ–Ω–∫–∞ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∫ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ (0-10)
        """
        has_escalation = data.get('has_escalation', 0)
        admin_to_criminal = data.get('admin_to_criminal', 0)
        
        if has_escalation:
            if admin_to_criminal > 2:
                return 9  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è
            elif admin_to_criminal > 0:
                return 7  # –ï—Å—Ç—å —ç—Å–∫–∞–ª–∞—Ü–∏—è
            else:
                return 5  # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è
        else:
            if data.get('admin_count', 0) > 5:
                return 4  # –ú–Ω–æ–≥–æ –∞–¥–º–∏–Ω –Ω–∞—Ä—É—à–µ–Ω–∏–π - —Ä–∏—Å–∫ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
            else:
                return 2  # –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    
    def get_risk_level(self, risk_score: float) -> Tuple[str, str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        
        Returns:
            level: –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            recommendation: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ
        """
        if risk_score >= 7:
            return "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", "–¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
        elif risk_score >= 5:
            return "üü° –í—ã—Å–æ–∫–∏–π", "–£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        elif risk_score >= 3:
            return "üü† –°—Ä–µ–¥–Ω–∏–π", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å"
        else:
            return "üü¢ –ù–∏–∑–∫–∏–π", "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å"
    
    def calculate_crime_probability(self, person_data: Dict, crime_type: str, days_ahead: int = 180) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è
        
        Args:
            person_data: –î–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ
            crime_type: –¢–∏–ø –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è
            days_ahead: –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –¥–Ω—è—Ö
            
        Returns:
            probability: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)
        """
        # –ë–∞–∑–æ–≤—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        base_probabilities = {
            '–ö—Ä–∞–∂–∞': 87.3,
            '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ': 82.3,
            '–£–±–∏–π—Å—Ç–≤–æ': 97.0,
            '–ì—Ä–∞–±–µ–∂': 60.2,
            '–†–∞–∑–±–æ–π': 20.2,
            '–í—ã–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ': 100.0,
            '–ò–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ': 65.6,
            '–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ': 45.0
        }
        
        base_prob = base_probabilities.get(crime_type, 50.0)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∏—Å–∫-–±–∞–ª–ª
        risk_score, _ = self.calculate_risk_score(person_data)
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        risk_modifier = risk_score / 10  # 0-1
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä (—á–µ–º –±–ª–∏–∂–µ —Å—Ä–æ–∫, —Ç–µ–º –≤—ã—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        time_windows = {
            '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ': 109,
            '–ö—Ä–∞–∂–∞': 146,
            '–£–±–∏–π—Å—Ç–≤–æ': 143,
            '–ì—Ä–∞–±–µ–∂': 148,
            '–†–∞–∑–±–æ–π': 150,
            '–ò–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ': 157,
            '–í—ã–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ': 144,
            '–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ': 155
        }
        
        expected_days = time_windows.get(crime_type, 140)
        time_modifier = 1.0
        
        if days_ahead < expected_days * 0.5:
            time_modifier = 0.6
        elif days_ahead < expected_days:
            time_modifier = 0.8
        elif days_ahead < expected_days * 1.5:
            time_modifier = 1.0
        else:
            time_modifier = 0.7
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        pattern = person_data.get('pattern_type', 'unknown')
        pattern_modifier = 1.0
        
        if pattern == 'chronic_criminal' and crime_type in ['–ö—Ä–∞–∂–∞', '–ì—Ä–∞–±–µ–∂']:
            pattern_modifier = 1.3
        elif pattern == 'escalating' and crime_type in ['–ì—Ä–∞–±–µ–∂', '–†–∞–∑–±–æ–π']:
            pattern_modifier = 1.2
        elif pattern == 'mixed_unstable':
            pattern_modifier = 1.1
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        probability = base_prob * risk_modifier * time_modifier * pattern_modifier
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 5-95%
        return max(5, min(95, probability))


class CrimeForecaster:
    """
    –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    """
    
    def __init__(self):
        self.risk_calculator = RiskCalculator()
        
        # –°—Ä–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–≤ –¥–Ω—è—Ö)
        self.base_windows = {
            '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ': 109,
            '–ö—Ä–∞–∂–∞': 146,
            '–£–±–∏–π—Å—Ç–≤–æ': 143,
            '–í—ã–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ': 144,
            '–ì—Ä–∞–±–µ–∂': 148,
            '–†–∞–∑–±–æ–π': 150,
            '–ò–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ': 157,
            '–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ': 155
        }
    
    def forecast_crime_timeline(self, person_data: Dict) -> Dict[str, Dict]:
        """
        –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π
        
        Returns:
            forecasts: –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π
        """
        forecasts = {}
        
        for crime_type, base_days in self.base_windows.items():
            forecast = self._calculate_single_forecast(person_data, crime_type, base_days)
            forecasts[crime_type] = forecast
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –¥–æ —Å–æ–±—ã—Ç–∏—è
        sorted_forecasts = dict(sorted(forecasts.items(), key=lambda x: x[1]['days']))
        
        return sorted_forecasts
    
    def _calculate_single_forecast(self, person_data: Dict, crime_type: str, base_days: int) -> Dict:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è
        """
        # –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        age_modifier = self._get_age_modifier(person_data)
        pattern_modifier = self._get_pattern_modifier(person_data, crime_type)
        social_modifier = self._get_social_modifier(person_data)
        
        # –†–∞—Å—á–µ—Ç –¥–Ω–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
        try:
            forecast_days = int(base_days * age_modifier * pattern_modifier * social_modifier)
            forecast_days = max(30, min(365, forecast_days))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        except (TypeError, ValueError):
            forecast_days = int(base_days)  # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
            forecast_days = max(30, min(365, forecast_days))
        
        # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        ci_lower = int(forecast_days * 0.7)
        ci_upper = int(forecast_days * 1.4)
        
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        probability = self.risk_calculator.calculate_crime_probability(
            person_data, crime_type, forecast_days
        )
        
        # –î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        try:
            forecast_date = datetime.now() + timedelta(days=forecast_days)
        except (TypeError, ValueError):
            forecast_date = datetime.now() + timedelta(days=base_days)
        
        # –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence = self._calculate_confidence(person_data, crime_type)
        
        return {
            'crime_type': crime_type,
            'days': forecast_days,
            'date': forecast_date,
            'probability': float(probability),  # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
            'ci_lower': ci_lower,
            'ci_upper': ci_upper,
            'confidence': confidence,
            'risk_level': self._get_timeline_risk_level(forecast_days)
        }
    
    def _get_age_modifier(self, data: Dict) -> float:
        """–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        age = data.get('current_age', 35)
        
        if age < 25:
            return 0.8  # –ú–æ–ª–æ–¥—ã–µ - –±—ã—Å—Ç—Ä–µ–µ
        elif age < 35:
            return 0.9
        elif age < 45:
            return 1.1
        else:
            return 1.3  # –°—Ç–∞—Ä—à–∏–µ - –º–µ–¥–ª–µ–Ω–Ω–µ–µ
    
    def _get_pattern_modifier(self, data: Dict, crime_type: str) -> float:
        """–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        pattern = data.get('pattern_type', 'unknown')
        
        modifiers = {
            'mixed_unstable': 0.9,
            'chronic_criminal': 0.7,
            'escalating': 0.6,
            'deescalating': 1.3,
            'single': 1.5,
            'unknown': 1.0
        }
        
        base_modifier = modifiers.get(pattern, 1.0)
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        if pattern == 'chronic_criminal' and crime_type in ['–ö—Ä–∞–∂–∞', '–ì—Ä–∞–±–µ–∂']:
            base_modifier *= 0.9
        elif pattern == 'escalating' and crime_type in ['–†–∞–∑–±–æ–π', '–£–±–∏–π—Å—Ç–≤–æ']:
            base_modifier *= 0.8
        
        return base_modifier
    
    def _get_social_modifier(self, data: Dict) -> float:
        """–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä"""
        modifier = 1.0
        
        if data.get('has_property', 0) == 0:
            modifier *= 0.85
        if data.get('has_job', 0) == 0:
            modifier *= 0.9
        if data.get('substance_abuse', 0) == 1:
            modifier *= 0.8
        
        return modifier
    
    def _calculate_confidence(self, data: Dict, crime_type: str) -> str:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ"""
        # –§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        factors = 0
        
        if data.get('total_cases', 0) > 5:
            factors += 1  # –ú–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö
        if data.get('pattern_type', 'unknown') != 'unknown':
            factors += 1  # –ò–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        if data.get('has_escalation', 0) == 1:
            factors += 1  # –ï—Å—Ç—å —Ç—Ä–µ–Ω–¥
        
        if factors >= 3:
            return "–í—ã—Å–æ–∫–∞—è"
        elif factors >= 2:
            return "–°—Ä–µ–¥–Ω—è—è"
        else:
            return "–ù–∏–∑–∫–∞—è"
    
    def _get_timeline_risk_level(self, days: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ"""
        if days < 60:
            return "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥"
        elif days < 120:
            return "üü° –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        elif days < 180:
            return "üü† –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
        else:
            return "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞
def quick_risk_assessment(person_data: Dict) -> Dict:
    """
    –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    """
    calculator = RiskCalculator()
    risk_score, components = calculator.calculate_risk_score(person_data)
    risk_level, recommendation = calculator.get_risk_level(risk_score)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
    forecaster = CrimeForecaster()
    forecasts = forecaster.forecast_crime_timeline(person_data)
    
    # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ (–ø–µ—Ä–≤–æ–µ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ)
    if forecasts:
        most_likely = next(iter(forecasts.values()))
    else:
        most_likely = None
    
    return {
        'risk_score': risk_score,
        'risk_level': risk_level,
        'recommendation': recommendation,
        'components': components,
        'most_likely_crime': most_likely
    }